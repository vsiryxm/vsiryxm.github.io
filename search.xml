<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL主从复制架构实践</title>
    <url>/blog/architecture/mysql-zhu-cong-fu-zhi-jia-gou-shi-jian.html</url>
    <content><![CDATA[<p>需求：实现主从复制，且可以向从服务器写数据。</p><img data-src="/images/loading.gif" data-original="/blog/architecture/mysql-zhu-cong-fu-zhi-jia-gou-shi-jian/2476164-b76232bd37c19cb0.png" title="主从复制原理"><h3 id="一、主服务器配置"><a href="#一、主服务器配置" class="headerlink" title="一、主服务器配置"></a>一、主服务器配置</h3><p><strong>1、启用binlog并设置服务器ID</strong></p><p>编辑<code>主服务器</code>的配置文件 <code>/etc/my.cnf</code>（宝塔默认），添加如下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#不带路径则与数据库所在路径一致</span><br><span class="line">log-bin&#x3D;&#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-bin</span><br><span class="line">#服务器编号，在主从架构中必须唯一 </span><br><span class="line">server-id&#x3D;1</span><br></pre></td></tr></table></figure><p>如果省略server-id（或将其显式设置为默认值0），则<code>主服务器</code>拒绝来自<code>从服务器</code>的任何连接。</p><a id="more"></a><p><strong>2、设置binlog存放路径<code>/www/server/data</code>可写权限</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line">chown mysql.mysql &#x2F;www&#x2F;server&#x2F;data</span><br></pre></td></tr></table></figure><p>宝塔默认存放在<code>/www/server/data</code>并设置可写权限，此步骤可跳过。</p><p><strong>3、其他设置</strong><br>为了在使用带事务的InnoDB进行复制设置时尽可能提高持久性和一致性，应该在<code>主服务器</code>的 <code>my.cnf</code> 文件中使用以下配置项：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innodb_flush_log_at_trx_commit &#x3D; 1</span><br><span class="line">sync_binlog &#x3D; 100</span><br></pre></td></tr></table></figure><p>注意：<br>默认<code>sync_binlog=0</code>，表示MySQL不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。<br>如果<code>sync_binlog&gt;0</code>，表示每<code>sync_binlog</code>次事务提交，MySQL调用文件系统的刷新操作将缓存刷下去。最安全的就是<code>sync_binlog=1</code>了，表示每次事务提交，MySQL都会把binlog刷下去，是最安全但是性能损耗最大的设置。这样的话，在数据库所在的主机操作系统损坏或者突然掉电的情况下，系统才有可能丢失1个事务的数据。<br>很多MySQL DBA设置的sync_binlog并不是最安全的1，而是100或者是0。<br>参考：<a href="https://www.cnblogs.com/xuxubaobao/p/10839979.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/xuxubaobao/p/10839979.html</a></p><p><strong>4、重启MySql</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld restart</span><br></pre></td></tr></table></figure><p><strong>5、检查skip_networking是否为OFF</strong><br>确保在<code>主服务器</code>上 <code>skip_networking</code> 选项处于 <code>OFF</code> 关闭状态, 这是默认值。<br>如果是启用<code>ON</code>的，则<code>从服务器</code>无法与<code>主服务器</code>通信，并且复制失败。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%skip_networking%&#39;;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| skip_networking | OFF   |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>6、创建一个专门用于复制数据的用户</strong><br>每个<code>从服务器</code>需要使用Mysql 主服务器上的用户名和密码连接到主服务器。<br>例如，计划使用用户 <code>simon</code> 可以从任何主机上连接到<code>主服务器</code>上进行复制操作, 并且用户 <code>simon</code> 仅可以使用复制的权限。<br>在主服务器Mysql中执行如下操作：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建用户</span><br><span class="line">CREATE USER &#39;simon&#39;@&#39;%&#39; </span><br><span class="line">#开通Repl_slave_priv: Y权限</span><br><span class="line">grant replication slave on *.* to &#39;simon&#39;@&#39;%&#39; identified by &#39;2019Simon&#39;;</span><br><span class="line">show grants for &#39;simon&#39;@&#39;%&#39;;</span><br><span class="line">#revoke all on *.* from &#39;simon&#39;@&#39;%&#39;; #移除权限</span><br></pre></td></tr></table></figure><p>为了验证创建用户是否成功可用，我们在<code>从服务器</code>上尝试一下登录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h115.29.*.108 -usimon -p2019Simon</span><br></pre></td></tr></table></figure><p>如果可以正常登录，说明成功可用。如果不行，请检查一下防火墙安全规则，开放3306端口。</p><h3 id="二、备份数据"><a href="#二、备份数据" class="headerlink" title="二、备份数据"></a>二、备份数据</h3><p><strong>情况一：主服务器中已经存在数据，而且数据量不大</strong></p><p>1、使用<code>mysqldump</code>命令从主库导出数据，并写入二进制日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mysqldump -uroot  -pee5ff2292e649127 --single-transaction --master-data --databases db_ssp &gt; db_ssp_bak.sql</span><br></pre></td></tr></table></figure><p><code>--master-data</code>参数，锁定所有表并写入二进制日志，个人理解：是告诉<code>从服务器</code>从刚刚导出数据的哪个点开始同步数据。<br>如果不使用 –master-data 参数，则需要手动锁定单独会话中的所有表。<br>如果使用–ignore-table 参数，可忽略某个表，忽略多个表时，如：<code>--ignore-table=db_ssp.ssp_ads_fail_log --ignore-table=db_ssp.ssp_channel_flow_collect</code><br>InnoDB引擎可带<code>--single-transaction</code>参数，以上只针对某一个数据库，如果是所有数据库，则执行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mysqldump  -uroot  -pee5ff2292e649127  --all-databases  --master-data&#x3D;1 &gt; all.sql</span><br></pre></td></tr></table></figure><p>2、在<code>主服务器</code>中使用<code>rsync</code>工具，把备份出来的数据传输到<code>从服务器</code>中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync -P --rsh&#x3D;ssh db_ssp_bak20191122.sql 47.103.38.242:&#x2F;root&#x2F;</span><br></pre></td></tr></table></figure><p>3、导入<code>从服务器</code>数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use db_ssp;</span><br><span class="line">mysql&gt; source &#x2F;root&#x2F;db_ssp_bak20191122.sql;</span><br></pre></td></tr></table></figure><p><strong>情况二：主服务器中已经存在数据，而且数据量很大</strong><br>略</p><p><strong>情况三：主服务器中无数据</strong><br>略</p><h3 id="三、从服务器配置"><a href="#三、从服务器配置" class="headerlink" title="三、从服务器配置"></a>三、从服务器配置</h3><p><strong>1、启用binlog并设置服务器ID</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#不带路径则与数据库所在路径一致</span><br><span class="line">log-bin&#x3D;&#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-bin</span><br><span class="line">#服务器编号，在主从架构中必须唯一 </span><br><span class="line">server-id&#x3D;2</span><br></pre></td></tr></table></figure><p><strong>2、配置要复制的和忽略的数据库</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replicate_do_db&#x3D;db_ssp</span><br><span class="line">#replicate_do_db&#x3D;db_ssp2  #如果复制多个库，不用逗号隔开，而是一行一个</span><br><span class="line">replicate_ignore_db&#x3D;information_schema  #忽略复制mysql5.7默认的4个库</span><br><span class="line">replicate_ignore_db&#x3D;performance_schema</span><br><span class="line">replicate_ignore_db&#x3D;mysql</span><br><span class="line">replicate_ignore_db&#x3D;sys</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_admin_user  #忽略复制db_ssp库中的几张表</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_ads_access_count</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_ads_fail_log</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_channel_flow_collect</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_stat_income_display</span><br></pre></td></tr></table></figure><p><code>replicate_do_db</code>为白名单，表示同步哪几个数据库，注意：在my.cnf中设置多个数据库时，不能使用逗号隔开，需要一行一个。如果只复制指定的表，使用<code>replicate_do_table=表名</code>；<br><code>replicate_ignore_db</code>为黑名单，表示不同步哪几个数据库。如果不复制指定的表<code>replicate_ignore_table=库名.表名</code>。<br>以上参数仅限在<code>从服务器</code>上设置。<br>也可以在<code>主服务器</code>上设置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binlog_do_db&#x3D;db_ssp</span><br><span class="line">binlog_do_db&#x3D;db_ssp2</span><br></pre></td></tr></table></figure><p>但过滤功能会造成一定的负载，推荐放在<code>从服务器</code>上配置。</p><h3 id="四、启动主从复制"><a href="#四、启动主从复制" class="headerlink" title="四、启动主从复制"></a>四、启动主从复制</h3><p><strong>1、进入<code>从服务器</code>，登录Mysql，设置要复制的<code>主服务器信息</code></strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to MASTER_HOST&#x3D;&#39;115.29.*.108&#39;, MASTER_USER&#x3D;&#39;simon&#39;, MASTER_PASSWORD&#x3D;&#39;2019Simon&#39;;</span><br></pre></td></tr></table></figure><p>分别输入主服务器的IP、上面创建的专用于复制的用户名和密码，回车。</p><p><strong>2、启动<code>从服务器</code>的复制线程</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p><strong>3、检查是否成功</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 115.29.191.108 &#x2F;&#x2F;主库IP</span><br><span class="line">                  Master_User: simon   &#x2F;&#x2F;复制用户名(连接主库的用户)</span><br><span class="line">                  Master_Port: 3306     &#x2F;&#x2F;主库的端口</span><br><span class="line">                Connect_Retry: 60      &#x2F;&#x2F;断链之后重试次数</span><br><span class="line">              Master_Log_File: mysql-bin.000004   &#x2F;&#x2F;已经获取到binlog的文件名</span><br><span class="line">          Read_Master_Log_Pos: 428027692      &#x2F;&#x2F;已经获取到的binlog位置号</span><br><span class="line">               Relay_Log_File: iZuf61lyoku3o73ozrd7x1Z-relay-bin.000004  &#x2F;&#x2F;从库已经运行过的relaylog的文件名</span><br><span class="line">                Relay_Log_Pos: 252264496  &#x2F;&#x2F;从库已经运行过的relay的位置号</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004  &#x2F;&#x2F;主库当前最新binlog文件名</span><br><span class="line">             Slave_IO_Running: Yes      &#x2F;&#x2F;从库IO线程状态</span><br><span class="line">            Slave_SQL_Running: Yes    &#x2F;&#x2F;从库SQL线程状态</span><br><span class="line">              Replicate_Do_DB: db_ssp</span><br><span class="line">          Replicate_Ignore_DB: information_schema,performance_schema,mysql,sys</span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 428027544</span><br><span class="line">              Relay_Log_Space: 428028296</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: a3d29300-efeb-11e9-830b-00163e0ac428</span><br><span class="line">             Master_Info_File: &#x2F;www&#x2F;server&#x2F;data&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure><p>从以上结果中，我们可以看到<code>Slave_IO_Running: Yes</code>（ I/O 线程）、 YES<code>Slave_SQL_Running: Yes</code>（SQL线程）都是<code>yes</code>，表示主从复制搭建成功！</p><h3 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a>五、常见问题</h3><p>1、MySQL主从复制故障，报1007错误的解决办法<br>通过<code>show slave status</code>我们发现如下错误：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Last_SQL_Errno: 1007</span><br><span class="line">Last_SQL_Error: Error &#39;Can&#39;t create database &#39;db_ssp&#39;; database exists&#39; on query. Default database: &#39;db_ssp&#39;. Query: &#39;create database &#96;db_ssp&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci&#39;</span><br></pre></td></tr></table></figure><p>答：<br>解决方法一：直接跳过该步骤</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">set global sql_slave_skip_counter&#x3D;1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>解决方法二：根据可以忽略的错误号修改<code>从服务器</code>的配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim  &#x2F;etc&#x2F;my.cnf</span><br><span class="line">slave-skip-errors&#x3D;1007,1008,1032,1062</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.2cto.com/database/201807/763757.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.2cto.com/database/201807/763757.html</a></p><p>2、MySQL主从复制故障，报1062错误的解决办法<br>答：先登录<code>从服务器</code>的Mysql，执行<code>show slave status\G;</code>，发现如下错误提示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: No</span><br><span class="line">Last_Errno: 1062</span><br><span class="line">Last_Error: Error &#39;Duplicate entry &#39;87&#39; for key &#39;PRIMARY&#39;&#39; on query. Default database: &#39;db_ssp&#39;. Query: &#39;INSERT INTO &#96;ssp_stat_income_display&#96; (&#96;ad_id&#96;, &#96;channel_id&#96;, &#96;show_num&#96;, &#96;click_num&#96;, &#96;date&#96;, &#96;media_id&#96;) VALUES (10, 5, 240, 18, 20191123, 4)&#39;</span><br><span class="line">Last_SQL_Errno: 1062</span><br><span class="line">Last_SQL_Error: Error &#39;Duplicate entry &#39;87&#39; for key &#39;PRIMARY&#39;&#39; on query. Default database: &#39;db_ssp&#39;. Query: &#39;INSERT INTO &#96;ssp_stat_income_display&#96; (&#96;ad_id&#96;, &#96;channel_id&#96;, &#96;show_num&#96;, &#96;click_num&#96;, &#96;date&#96;, &#96;media_id&#96;) VALUES (10, 5, 240, 18, 20191123, 4)&#39;</span><br></pre></td></tr></table></figure><p>从以上反馈中可以得知，Slave_IO线程正常，即从<code>主服务器</code>上同步<code>Relay log</code>（中断日志）是正常的，Slave_SQL线程处于<code>NO</code>状态，即<code>从服务器</code>从<code>Relay log</code>（中断日志）中执行sql命令失败。<br>Last_SQL_Error告诉我们表中id=87的主键值已经存在了，插入失败。原因是因为同事在<code>从服务器</code>（测试环境）上做了写入操作，导致Slave_SQL线程执行命令失败，主从同步中断。<br>恢复操作如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master to MASTER_HOST&#x3D;&#39;115.29.*.108&#39;, MASTER_USER&#x3D;&#39;simon&#39;, MASTER_PASSWORD&#x3D;&#39;2019Simon&#39;;</span><br><span class="line">start slave; #发现再次出现了上面第1个问题的错误</span><br><span class="line">stop slave;</span><br><span class="line">set global sql_slave_skip_counter&#x3D;1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><blockquote><p>参数sql_slave_skip_counter跳过的是event,不是单个事务，参考：<a href="https://blog.csdn.net/weixin_34236869/article/details/90251043" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_34236869/article/details/90251043</a><br>也可以将数据库设置成readonly</p></blockquote><p>3、<code>从服务器</code>的<code>my.cnf</code>添加<code>replicate_lgnore_table</code>后，启动不了，提示如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[....] Starting mysqld (via systemctl): mysqld.serviceJob for mysqld.service failed because the control process exited with error code.</span><br><span class="line">See &quot;systemctl status mysqld.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line"> failed!</span><br></pre></td></tr></table></figure><p>原因是：从库已经存在之前的relay log，解决办法同第4个问题</p><p>4、<code>从服务器</code>Mysql执行<code>start slave</code>后报错ERROR1872，提示如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1872 (HY000): Slave failed to initialize relay log info structure from the repository</span><br></pre></td></tr></table></figure><p>原因是：从库已经存在之前的relay log，解决办法：使用RESET SLAVE语句，清除master信息和relay日志的信息，删除所有的relay日志文件，并开始创建一个全新的中继日志</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">mysql&gt; reset slave;</span><br></pre></td></tr></table></figure><p>5、在不影响主从复制的情况下，假设我们需要在<code>主服务器</code>上执行一些SQL语句，但又不想同步到<code>从服务器</code>，怎么办？<br>答：登录mysql命令窗口，执行<code>SET sql_log_bin=0</code>，本次连接mysql的session里面所输入并执行的语句都不会被计入bin_log，也不会被<code>从服务器</code>执行。执行<code>SET sql_log_bin=1</code>又可以恢复计入bin_log，很有用，强调一下：<code>SET sql_log_bin=0</code>这个设置只对当前这次连接有效，不影响其他操作计入bin_log。<br>测试方法：一边在<code>navicat</code>上修改，一边在mysql命令窗口修改，观察主从变化情况。</p><p>更多故障排查，参考：<a href="https://www.jianshu.com/p/ecd00306cf92" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/ecd00306cf92</a></p><h3 id="六、附录"><a href="#六、附录" class="headerlink" title="六、附录"></a>六、附录</h3><p><strong>主服务器my.cnf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">#password       &#x3D; your_password</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">datadir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line">default_storage_engine &#x3D; InnoDB</span><br><span class="line">performance_schema_max_table_instances &#x3D; 400</span><br><span class="line">table_definition_cache &#x3D; 400</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size &#x3D; 64M</span><br><span class="line">max_allowed_packet &#x3D; 100G</span><br><span class="line">table_open_cache &#x3D; 256</span><br><span class="line">sort_buffer_size &#x3D; 1M</span><br><span class="line">net_buffer_length &#x3D; 4K</span><br><span class="line">read_buffer_size &#x3D; 1M</span><br><span class="line">read_rnd_buffer_size &#x3D; 256K</span><br><span class="line">myisam_sort_buffer_size &#x3D; 16M</span><br><span class="line">thread_cache_size &#x3D; 32</span><br><span class="line">query_cache_size &#x3D; 32M</span><br><span class="line">tmp_table_size &#x3D; 64M</span><br><span class="line">sql-mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">explicit_defaults_for_timestamp &#x3D; true</span><br><span class="line">#skip-name-resolve</span><br><span class="line">max_connections &#x3D; 500</span><br><span class="line">max_connect_errors &#x3D; 100</span><br><span class="line">open_files_limit &#x3D; 65535</span><br><span class="line"></span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line">server-id &#x3D; 1</span><br><span class="line">expire_logs_days &#x3D; 10</span><br><span class="line">slow_query_log&#x3D;1</span><br><span class="line">slow-query-log-file&#x3D;&#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br><span class="line">long_query_time&#x3D;0.1</span><br><span class="line">log_queries_not_using_indexes&#x3D;on</span><br><span class="line">early-plugin-load &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">innodb_data_home_dir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line">innodb_data_file_path &#x3D; ibdata1:10M:autoextend</span><br><span class="line">innodb_log_group_home_dir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line">innodb_buffer_pool_size &#x3D; 256M</span><br><span class="line">innodb_log_file_size &#x3D; 128M</span><br><span class="line">innodb_log_buffer_size &#x3D; 32M</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 1</span><br><span class="line">sync_binlog &#x3D; 0</span><br><span class="line">innodb_lock_wait_timeout &#x3D; 50</span><br><span class="line">innodb_max_dirty_pages_pct &#x3D; 90</span><br><span class="line">innodb_read_io_threads &#x3D; 2</span><br><span class="line">innodb_write_io_threads &#x3D; 2</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">user&#x3D;root</span><br><span class="line">password&#x3D;&quot;ee5ff2292e649***&quot;</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 500M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 64M</span><br><span class="line">sort_buffer_size &#x3D; 1M</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line">write_buffer &#x3D; 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><p><strong>从服务器my.cnf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">#password       &#x3D; your_password</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port            &#x3D; 3306</span><br><span class="line">socket          &#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">datadir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line">default_storage_engine &#x3D; InnoDB</span><br><span class="line">performance_schema_max_table_instances &#x3D; 400</span><br><span class="line">table_definition_cache &#x3D; 400</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size &#x3D; 128M</span><br><span class="line">max_allowed_packet &#x3D; 100G</span><br><span class="line">table_open_cache &#x3D; 512</span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line">net_buffer_length &#x3D; 4K</span><br><span class="line">read_buffer_size &#x3D; 2M</span><br><span class="line">read_rnd_buffer_size &#x3D; 256K</span><br><span class="line">myisam_sort_buffer_size &#x3D; 32M</span><br><span class="line">thread_cache_size &#x3D; 64</span><br><span class="line">query_cache_size &#x3D; 64M</span><br><span class="line">tmp_table_size &#x3D; 64M</span><br><span class="line">sql-mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">explicit_defaults_for_timestamp &#x3D; true</span><br><span class="line">#skip-name-resolve</span><br><span class="line">max_connections &#x3D; 500</span><br><span class="line">max_connect_errors &#x3D; 100</span><br><span class="line">open_files_limit &#x3D; 65535</span><br><span class="line"></span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line">server-id &#x3D; 2</span><br><span class="line">expire_logs_days &#x3D; 10</span><br><span class="line">slow_query_log&#x3D;1</span><br><span class="line">slow-query-log-file&#x3D;&#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br><span class="line">long_query_time&#x3D;0.1</span><br><span class="line">log_queries_not_using_indexes&#x3D;on</span><br><span class="line">early-plugin-load &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">#自定义&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">replicate_do_db&#x3D;db_ssp</span><br><span class="line">replicate_ignore_db&#x3D;information_schema</span><br><span class="line">replicate_ignore_db&#x3D;performance_schema</span><br><span class="line">replicate_ignore_db&#x3D;mysql</span><br><span class="line">replicate_ignore_db&#x3D;sys</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_admin_user</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_ads_access_count</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_ads_fail_log</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_channel_flow_collect</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_stat_income_display</span><br><span class="line">slave-skip-errors&#x3D;1007,1008,1032,1062</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">innodb_data_home_dir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line">innodb_data_file_path &#x3D; ibdata1:10M:autoextend</span><br><span class="line">innodb_log_group_home_dir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line">innodb_buffer_pool_size &#x3D; 512M</span><br><span class="line">innodb_log_file_size &#x3D; 256M</span><br><span class="line">innodb_log_buffer_size &#x3D; 64M</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 1</span><br><span class="line">innodb_lock_wait_timeout &#x3D; 50</span><br><span class="line">innodb_max_dirty_pages_pct &#x3D; 90</span><br><span class="line">innodb_read_io_threads &#x3D; 2</span><br><span class="line">innodb_write_io_threads &#x3D; 2</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 500M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 128M</span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line">write_buffer &#x3D; 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><h3 id="七、心得"><a href="#七、心得" class="headerlink" title="七、心得"></a>七、心得</h3><p>1、在主从复制架构中，为了避免<code>从服务器</code>复制因为人为写原因导致中断，可以将库设置为只读：<br><code>mysql&gt; set global read_only=1;</code>（也可以将<code>从服务器</code>的 my.cnf 设置 read-only=1）<br>这样的话，<code>从服务器</code>上的数据库就被设置成全局只读了，但是如果只针对某一个数据库只读，可以创建一个只读用户（只能select）即可。<br>解除全局只读命令：<code>mysql&gt; set global read_only=0;</code><br>参考：<a href="https://blog.csdn.net/u013636377/article/details/50905768" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/u013636377/article/details/50905768</a></p><hr><p>参考：<br><a href="https://www.jianshu.com/p/faf0127f1cb2" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/faf0127f1cb2</a><br><a href="https://blog.csdn.net/z69183787/article/details/70183284" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/z69183787/article/details/70183284</a><br><a href="https://www.jianshu.com/p/ecd00306cf92" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/ecd00306cf92</a><br><a href="https://www.imooc.com/learn/539" target="_blank" rel="external nofollow noopener noreferrer">https://www.imooc.com/learn/539</a> MySQL主从复制教程<br><a href="https://blog.csdn.net/tr1912/article/details/81302648" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/tr1912/article/details/81302648</a> 双机热备，即主主复制，看懂了，哈哈<br><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-options-slave.html#option_mysqld_replicate-ignore-table" target="_blank" rel="external nofollow noopener noreferrer">https://dev.mysql.com/doc/refman/5.7/en/replication-options-slave.html#option_mysqld_replicate-ignore-table</a> 官方主从复制参数详解</p>]]></content>
      <categories>
        <category>架构思维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析高并发下MySQL的数据一致性</title>
    <url>/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing.html</url>
    <content><![CDATA[<h3 id="一、并发带来的问题"><a href="#一、并发带来的问题" class="headerlink" title="一、并发带来的问题"></a>一、并发带来的问题</h3><p>在多个线程同时开启事务后对数据库进行访问时，不可避免就会出现多个线程之间交叉访问而导致数据的不一致，通常存在以下问题：</p><h5 id="1-1-脏读（读取未提交数据）"><a href="#1-1-脏读（读取未提交数据）" class="headerlink" title="1.1 脏读（读取未提交数据）"></a>1.1 脏读（读取未提交数据）</h5><p>如下图，事务2读取了事务1未提交的数据。</p><img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-264971908e0ffb2e.png" title="脏读"><blockquote><p>举个栗子：<br>假设一个秒杀火车票的场景，目前上海到新化的火车票库存只有1张票了，张三（事务1）和李四（事务2）同时发起抢票，张三抢到了1张票，事务1正在扣除库存还没有提交入库，事务2此时查询发现还有余票（读到库存仍然为1），李四也可能买到了1张票，导致库存与销量不一致。</p></blockquote><a id="more"></a><h5 id="1-2-不可重复读（前后多次读取，数据内容不一致）"><a href="#1-2-不可重复读（前后多次读取，数据内容不一致）" class="headerlink" title="1.2 不可重复读（前后多次读取，数据内容不一致）"></a>1.2 不可重复读（前后多次读取，数据内容不一致）</h5><p>在同一事务中，两次读取同一数据，得到内容不同。<br>例如事务1读取了某个数据，然后事务2更新了这个数据并提交，然后事务1又来读取了一次，那这两次读取的结果就会不一样。</p><img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-11614a43b69eecfd.png" title="不可重复读"><blockquote><p>注意：不可重复读与幻读的区别在于：<br>不可重复读是针对于多次读取同一条数据出现不同结果，幻读是多次读取而产生的记录数不一样。</p></blockquote><h5 id="1-3-幻读（前后多次读取，数据总量不一致）"><a href="#1-3-幻读（前后多次读取，数据总量不一致）" class="headerlink" title="1.3 幻读（前后多次读取，数据总量不一致）"></a>1.3 幻读（前后多次读取，数据总量不一致）</h5><p>在一个事务的两次查询中数据记录数不一致，例如有一个事务1查询了几行数据，而事务2在此时插入了新的几行数据，事务1在接下来的查询中，就会发现有几行数据是它先前所没有的。</p><img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-62a54bc3f9df8c78.png" title="幻读"><h5 id="1-4-更新丢失"><a href="#1-4-更新丢失" class="headerlink" title="1.4 更新丢失"></a>1.4 更新丢失</h5><p>当两个事务选择同一行，然后更新数据，由于每个事务都不知道其他事务的存在，就会发生丢失更新的问题。</p><img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-4c33c6f66f1fe2b4.png" title="更新丢失"><blockquote><p>举个栗子：<br>比如一个公司账号下有两个员工子账号，张三和李四分别登录后，两人同时发起修改公司名称（分别对应事务1和事务2），两个事务同时提交时就发生了覆盖，张三就会发现刚才修改的公司名称xx公司变成了yy公司（李四的提交结果）。</p></blockquote><h3 id="二、解决方案——设置隔离级别"><a href="#二、解决方案——设置隔离级别" class="headerlink" title="二、解决方案——设置隔离级别"></a>二、解决方案——设置隔离级别</h3><p>为解决上述问题，可以给数据库设置相应的隔离级别，保证各线程数据获取的准确性。<br>有以下4种隔离级别：<br>|隔离级别|读数据一致性|脏读|不可重复读|幻读<br>|:—:|:—:|:—:|:—:|:—:|<br>|未提交读|最低级别，只保证不读取物理上损坏的数据|有|有|有|<br>|已提交读|语句级|无|有|有|<br>|可重复读|事务级|无|无|有|<br>|可串行化|最高级别，事务级|无|无| 无|</p><ul><li>READ_UNCOMMITTED ：未提交读，允许脏读，不可重读，幻读。</li><li>READ_COMMITTED：已提交读，仅允许读取已提交的数据，即不能脏读，但是可能发生不可重读和幻读。</li><li>REPEATABLE_READ ：可重复读，不可读脏，可重复读（即多次读取数据一致），但是可能发生幻读。</li><li>SERIALIZABLE ：串行化事务，保证不读脏，不幻读，可重复读，事务隔离级别最高，但是并发冲突最高。</li></ul><hr><p><strong>MySQL默认的隔离级别为：<code>repeatable-read</code>（可重复读），不允许脏读，但允许幻读。</strong></p><hr><blockquote><p>隔离级别越高越严格，内部工作机制越复杂，较低的隔离级别通常支持更高的并发。</p></blockquote><p>在MySQL数据库中查看当前事务的隔离级别，使用命令<code>select @@tx_isolation</code>，也可以使用命令<code>show variables like &quot;%tx_isolation%&quot;</code>，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@tx_isolation;</span><br><span class="line"></span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>在MySQL数据库中设置事务的隔离级别：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set tx_isolation&#x3D;&#39;read-uncommitted&#39;; &#x2F;&#x2F;允许脏读，不可重读，幻读。</span><br><span class="line">set tx_isolation&#x3D;&#39;read-committed&#39;; &#x2F;&#x2F;仅允许读取已提交的数据，即不能脏读，但是可能发生不可重读和幻读。</span><br><span class="line">set tx_isolation&#x3D;&#39;repeatable-read&#39;; &#x2F;&#x2F;不可读脏，可重复读（即多次读取数据一致），但是可能发生幻读。</span><br><span class="line">set tx_isolation&#x3D;&#39;serializable&#39;; &#x2F;&#x2F;串行化事务，保证不读脏，可重复读，不可幻读，事务隔离级别最高。</span><br></pre></td></tr></table></figure><blockquote><p>凡是DDL语句（涉及到表结构的语句），都是自带commit，比如create table 、alter table、truncate，皆不受事务控制。</p></blockquote><h3 id="三、隔离级别演示"><a href="#三、隔离级别演示" class="headerlink" title="三、隔离级别演示"></a>三、隔离级别演示</h3><p>创建测试数据库，添加测试数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for tb_account</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;tb_account&#96;;</span><br><span class="line">CREATE TABLE &#96;tb_account&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(255) NULL DEFAULT NULL,</span><br><span class="line">  &#96;balance&#96; varchar(255) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 3 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of tb_account</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;tb_account&#96; VALUES (1, &#39;simon&#39;, &#39;100&#39;);</span><br><span class="line">INSERT INTO &#96;tb_account&#96; VALUES (2, &#39;fengya&#39;, &#39;100&#39;);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure><h5 id="3-1、未提交读-READ-UNCOMMITTED"><a href="#3-1、未提交读-READ-UNCOMMITTED" class="headerlink" title="3.1、未提交读 READ_UNCOMMITTED"></a>3.1、未提交读 READ_UNCOMMITTED</h5><table><thead><tr><th align="center">session 1</th><th align="center">session 2</th></tr></thead><tbody><tr><td align="center">set session transaction isolation level read uncommitted;</td><td align="center">set session transaction isolation level read uncommitted;</td></tr><tr><td align="center">select @@tx_isolation;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-fbea9f82c04f41a8.png"></td><td align="center">select @@tx_isolation;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-fbea9f82c04f41a8.png"></td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td></tr><tr><td align="center"></td><td align="center">update tb_account set balance=balance-10 where id = 1;</td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0bf58ab8095349b6.png"></td><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0bf58ab8095349b6.png"></td></tr><tr><td align="center"></td><td align="center">commit;</td></tr></tbody></table><blockquote><p>【小结】<br>由上面的操作可以得出，事务2在更新后commit前，事务1可以实时查询到数据的变化，称之为事务2未提交读。<br>一旦事务2因为某种原因回滚了，更新的操作被撤销，那事务1查询到的数据，就为脏数据，所以未提交读（READ_UNCOMMITTED）会导致脏读。在实际项目中，有多个事务在同时更新同一个数据，而且事务之间是不知道对方有没有回滚的，很容易导致脏读，所以这个时候可以采用“已提交读（READ_COMMITTED）”隔离级别。</p></blockquote><h5 id="3-2、已提交读-READ-COMMITTED"><a href="#3-2、已提交读-READ-COMMITTED" class="headerlink" title="3.2、已提交读 READ_COMMITTED"></a>3.2、已提交读 READ_COMMITTED</h5><table><thead><tr><th align="center">session 1</th><th align="center">session 2</th></tr></thead><tbody><tr><td align="center">set session transaction isolation level read committed;</td><td align="center">set session transaction isolation level read committed;</td></tr><tr><td align="center">select @@tx_isolation;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-1c0eed6a13b73797.png"></td><td align="center">select @@tx_isolation;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-1c0eed6a13b73797.png"></td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td></tr><tr><td align="center"></td><td align="center">update tb_account set balance=balance-10 where id = 1;</td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0bf58ab8095349b6.png"></td></tr><tr><td align="center"></td><td align="center">commit;</td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0bf58ab8095349b6.png"></td><td align="center"></td></tr><tr><td align="center">commit;</td><td align="center"></td></tr></tbody></table><blockquote><p>【小结】<br>由上面的操作可以得出，事务1读到的数据，始终是事务2更新后commit后的数据，不会脏读，解决了“未提交读 READ_UNCOMMITTED”带来的脏读问题，但又产生了新的问题：在事务1的commit操作之前，导致了事务1的不可重复读（也就是在事务1范围内（提交前），多次读取的数据不一样）。</p></blockquote><h5 id="3-3、可重复读-REPEATABLE-READ"><a href="#3-3、可重复读-REPEATABLE-READ" class="headerlink" title="3.3、可重复读 REPEATABLE_READ"></a>3.3、可重复读 REPEATABLE_READ</h5><table><thead><tr><th align="center">session 1</th><th align="center">session 2</th></tr></thead><tbody><tr><td align="center">select @@tx_isolation;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0f53477db3bebd2b.png"></td><td align="center">select @@tx_isolation;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0f53477db3bebd2b.png"></td></tr><tr><td align="center">start transaction;</td><td align="center">start transaction;</td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td></tr><tr><td align="center"></td><td align="center">update tb_account set balance=balance-10 where id = 1;</td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0bf58ab8095349b6.png"></td></tr><tr><td align="center"></td><td align="center">commit;</td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-69984427544cce18.png"></td><td align="center"></td></tr><tr><td align="center">commit;</td><td align="center"></td></tr><tr><td align="center">select * from tb_account;<img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-0bf58ab8095349b6.png"></td><td align="center"></td></tr></tbody></table><blockquote><p>【小结】<br>由上面的操作可以得出，事务1在开启事务后，就打上版本号了，在事务1做commit操作前，事务1中所有的查询操作都是快照数据，不受事务2的更新影响，解决了前面两个级别的缺陷：脏读和不可重复读，做到了<strong>可重复读</strong>。但还有一个问题未解决：幻读，如果此时事务2插入一条新记录，那么事务1多次读取时，记录条数就不一样，MySQL默认的隔离级别就是“可重复读 REPEATABLE_READ ”，可见这种情况还是能被容忍的。如果脏读、不可重复读、幻读要全部解决，只能采用最高级别了——SERIALIZABLE 串行化事务。<br>可重复读，是由MVVC (Multi-Version Concurrency Control) 基于多版本的并发控制协议，只有在InnoDB引擎下存在。<a href="https://www.cnblogs.com/hirampeng/p/9944200.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/hirampeng/p/9944200.html</a></p></blockquote><h4 id="3-4、串行化事务-SERIALIZABLE"><a href="#3-4、串行化事务-SERIALIZABLE" class="headerlink" title="3.4、串行化事务 SERIALIZABLE"></a>3.4、串行化事务 SERIALIZABLE</h4><table><thead><tr><th align="center">session 1</th><th align="center">session 2</th></tr></thead><tbody><tr><td align="center">set session transaction isolation level serializable;</td><td align="center">set session transaction isolation level serializable;</td></tr><tr><td align="center"><img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-1d9b63cdfe5f6625.png"></td><td align="center"><img data-src="/images/loading.gif" data-original="/blog/mysql/qian-xi-gao-bing-fa-xia-mysql-de-shu-ju-yi-zhi-xing/2476164-1d9b63cdfe5f6625.png"></td></tr><tr><td align="center">start transaction;</td><td align="center">start transaction;</td></tr><tr><td align="center">select * from tb_account;</td><td align="center"></td></tr><tr><td align="center">（已锁表）</td><td align="center">insert into tb_account values (3, ‘zhangsan’, 100);, 100);</td></tr><tr><td align="center">commit;</td><td align="center">等待</td></tr><tr><td align="center"></td><td align="center">执行成功 Query OK, 1 row affected (0.00 sec)</td></tr><tr><td align="center"></td><td align="center">commit;</td></tr></tbody></table><blockquote><p>【小结】<br>由上面的操作可以得出，事务1查询数据时，先锁住了表，事务2插入一条记录只能等待，如果等待时间过长，会提示<code>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</code>，MySQL中事务隔离级别为serializable时做任何操作都会先锁表，因此不会出现幻读的情况，这种隔离级别并发性极低，往往一个事务霸占了一张表，其他成千上万个事务只能干瞪眼，得等它用完（提交后）才可以使用，开发中很少会用到。</p></blockquote><hr><p>思考：<br>已提交读和可重复读是通过什么协议做到的？<br>答：是通过MVVC (Multi-Version Concurrency Control)协议做到的，中文名为：基于多版本的并发控制协议，只有在InnoDB引擎下存在。MVCC只工作在REPEATABLE READ和READ COMMITED隔离级别下。InnoDB在每行数据都增加两个隐藏字段，一个记录创建的版本号，一个记录删除的版本号。<br>参考：<a href="https://www.cnblogs.com/hirampeng/p/9944200.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/hirampeng/p/9944200.html</a></p><p>参考：<br><a href="https://www.cnblogs.com/fengyumeng/p/9852735.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/fengyumeng/p/9852735.html</a><br><a href="https://blog.csdn.net/qq_34975710/article/details/81077178" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/qq_34975710/article/details/81077178</a><br><a href="https://www.jb51.net/article/116477.htm" target="_blank" rel="external nofollow noopener noreferrer">https://www.jb51.net/article/116477.htm</a><br><a href="https://www.jianshu.com/p/081a3e208e32" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/081a3e208e32</a> 例子举的很通俗<br><a href="https://www.cnblogs.com/wyc1994666/p/11367051.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/wyc1994666/p/11367051.html</a> mysql 事务的实现原理，讲得非常细致<br><a href="https://blog.csdn.net/w_linux/article/details/79666086" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/w_linux/article/details/79666086</a> MySQL——事务(Transaction)详解</p>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解磁盘IO</title>
    <url>/blog/other/shen-ru-li-jie-ci-pan-io.html</url>
    <content><![CDATA[<h3 id="一、硬盘的物理结构"><a href="#一、硬盘的物理结构" class="headerlink" title="一、硬盘的物理结构"></a>一、硬盘的物理结构</h3><img data-src="/images/loading.gif" data-original="/blog/other/shen-ru-li-jie-ci-pan-io/2476164-42633adf7e14f289.jpg" title="硬盘的内部结构图"><p>一块硬盘在物理上被划分为：<br><strong>盘片</strong><br>1个硬盘有多个盘片，1个盘片有2个面，称之为盘面，盘片被固定在主轴上。<br>盘片最里面靠近主轴处（磁头靠近主轴接触的表面），即线速度最小的地方，是一个特殊的空白区域，它不存放任何数据，称为启停区或着陆区。硬盘不工作时，磁头就悬停在这里。</p><p><strong>主轴</strong><br>主轴被固定在硬盘底部的马达上，相当于发动机，马达高速转动，带动主轴转动，主轴带着盘片转动。</p><p><strong>磁头</strong><br>读写数据的关键部件，被固定在传动手臂上，磁头有自己的编号，从0开始编号，读写数据时，盘片高速转动，0号磁头写完数据，1号磁头接着写，2号磁头接着写…… 依次进行，直到这个柱面被存满，这样保证文件连续存储在一个柱面上，再向内移动传动手臂，开始写下一个柱面，依次进行，读数据时也跟写数据类似。<br>从正上方向下看，所有磁头任何时候都是重叠的（不过目前已经有多磁头独立技术，可不受此限制）<br>磁头被传动手臂带动，沿盘片的半径方向运动（实际是斜切向运动）</p><p><strong>传动手臂</strong><br>一个传动手臂上，有上下2个磁头，这样可以同时读写2个盘面，运动方向是径向运动，即沿盘片的半径方向运动（从外圆垂直往内圆运动）</p><p><strong>存取装置</strong></p><a id="more"></a><h3 id="二、硬盘的逻辑结构"><a href="#二、硬盘的逻辑结构" class="headerlink" title="二、硬盘的逻辑结构"></a>二、硬盘的逻辑结构</h3><img data-src="/images/loading.gif" data-original="/blog/other/shen-ru-li-jie-ci-pan-io/2476164-d07b326a53428d3e.png" title="硬盘逻辑结构"> <img data-src="/images/loading.gif" data-original="/blog/other/shen-ru-li-jie-ci-pan-io/2476164-8042dbd55f9dc96d.png"><p>一块硬盘在逻辑上被划分为：<br><strong>磁道</strong><br>一块新硬盘上，啥也没有，磁道、扇区都没有，格式化的工作，就是将盘面划分成N个磁道和扇区。<br>一个圆（圈）就是一个磁道，硬盘存放数据就是从最外面的圆开始的，最外面的圆也称为0磁道，即半径最大的那个圆，0磁道很重要，如果坏了，硬盘基本上就报废了。<br>硬盘会有一个专门定位0磁道的装置，它是用来完成硬盘的初始定位的。</p><p><strong>柱面</strong><br>柱面是分区的最小单位。<br>因为硬盘有多个盘片，都是绝对平行被固定在主轴上的，从第1个盘片的某1个磁道垂直下去，与所有盘片上的这个同心圆形成一个面，称之为柱面，即一个圆柱桶的形状。<br>数据的读/写按柱面进行，而不按盘面进行。也就是说，一个磁道写满数据后，就在同一柱面的下一个盘面来写，一个柱面写满后，才移到下一个扇区开始写数据。读数据也按照这种方式进行，这样就提高了硬盘的读/写效率。</p><p><strong>扇区</strong><br>扇区是最小的物理存储单位，每个扇区512Byte。</p><h3 id="三、硬盘读写数据时的顺序"><a href="#三、硬盘读写数据时的顺序" class="headerlink" title="三、硬盘读写数据时的顺序"></a>三、硬盘读写数据时的顺序</h3><p>从盘面的上到下，然后从外磁道到内磁道，数据的读/写按柱面进行，而不按盘面进行。</p><p>一次访盘请求（读/写）完成过程由三个动作组成：<br>1）寻道（时间）：先将磁头移动定位到指定磁道<br>2）旋转延迟（时间）：等待指定扇区从磁头下旋转经过<br>3）数据传输（时间）：数据在磁盘与内存之间的实际传输</p><p>因此在磁盘上读取扇区数据（一块数据）所需要的时间为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ti&#x2F;o &#x3D; tseek + tla + n * twm</span><br></pre></td></tr></table></figure><p>其中：<br>tseek 为寻道时间<br>tla为旋转时间<br>twm 为传输时间</p><h3 id="四、硬盘容量计算"><a href="#四、硬盘容量计算" class="headerlink" title="四、硬盘容量计算"></a>四、硬盘容量计算</h3><p>整个硬盘体积换算公式是：<br>磁面个数 * 扇区个数 * 每个扇区的大小512 * 柱面个数 = 硬盘体积 （单位bytes)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# fdisk -l</span><br><span class="line">Disk &#x2F;dev&#x2F;sda：20 GiB，21474836480 字节，41943040 个扇区</span><br><span class="line">单元：扇区 &#x2F; 1 * 512 &#x3D; 512 字节</span><br><span class="line">扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节</span><br><span class="line">I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x774648f6</span><br><span class="line"></span><br><span class="line">设备       启动    起点     末尾     扇区 大小 Id 类型</span><br><span class="line">&#x2F;dev&#x2F;sda1  *       2048  2099199  2097152   1G 83 Linux</span><br><span class="line">&#x2F;dev&#x2F;sda2       2099200 41943039 39843840  19G 8e Linux LVM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk &#x2F;dev&#x2F;mapper&#x2F;cl-root：17 GiB，18253611008 字节，35651584 个扇区</span><br><span class="line">单元：扇区 &#x2F; 1 * 512 &#x3D; 512 字节</span><br><span class="line">扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节</span><br><span class="line">I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk &#x2F;dev&#x2F;mapper&#x2F;cl-swap：2 GiB，2143289344 字节，4186112 个扇区</span><br><span class="line">单元：扇区 &#x2F; 1 * 512 &#x3D; 512 字节</span><br><span class="line">扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节</span><br><span class="line">I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节</span><br></pre></td></tr></table></figure><h3 id="五、磁盘阵列"><a href="#五、磁盘阵列" class="headerlink" title="五、磁盘阵列"></a>五、磁盘阵列</h3><p>磁盘阵列是由很多块独立的磁盘，组合成一个容量巨大的磁盘组。<br>独立磁盘冗余阵列（RAID，redundant array of independent disks）是把相同的数据存储在多个硬盘的不同的地方（因此，冗余地）的方法。通过把数据放在多个硬盘上，输入输出操作能以平衡的方式交叠，改良性能。因为多个硬盘增加了平均故障间隔时间（MTBF），储存冗余数据也增加了容错。</p><p>RAID技术主要有以下三个基本功能：<br>(1)通过对磁盘上的数据进行条带化，实现对数据成块存取，减少磁盘的机械寻道时间，提高了数据存取速度。<br>(2)通过对一个阵列中的几块磁盘同时读取，减少了磁盘的机械寻道时间，提高数据存取速度。<br>(3)通过镜像或者存储奇偶校验信息的方式，实现了对数据的冗余保护。</p><p>优点<br>1）提高传输速率。<br>2）通过数据校验提供容错功能。</p><p>缺点<br>RAID0没有冗余功能，如果一个磁盘（物理）损坏，则所有的数据都无法使用。<br>RAID1磁盘的利用率最高只能达到50%(使用两块盘的情况下)，是所有RAID级别中最低的。<br>RAID0+1以理解为是RAID 0和RAID 1的折中方案。RAID 0+1可以为系统提供数据安全保障，但保障程度要比 Mirror低而磁盘空间利用率要比Mirror高。</p><p>参考：<br><a href="https://blog.csdn.net/hguisu/article/details/7408047" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/hguisu/article/details/7408047</a></p>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>磁盘IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx负载均衡测试</title>
    <url>/blog/nginx/nginx-fu-zai-jun-heng-ce-shi.html</url>
    <content><![CDATA[<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>1、在虚拟机中建立两个web服务器：<br>aaa网站，IP和端口为：192.168.1.107:8090<br>bbb网站，IP和端口为：192.168.1.107:8091</p><blockquote><p>nginx可以设置监听多个不同端口，以达到访问不同网站的目的。<br>只要修改.conf文件中的 <strong>listen &lt;端口号&gt;</strong> 即可，如果不能访问，请检查iptables有没有开放端口。</p></blockquote><p>2、将本机做为一台nginx代理服务器，IP为192.168.1.105<br>3、在本机的nginx的vhost目录建立任意.conf文件，或直接修改nginx.conf<br>设置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream web_servers &#123;  </span><br><span class="line">#server ip地址:端口号 weight表示权值，权值越大，被分配的几率越大;</span><br><span class="line"># max_fails </span><br><span class="line">    server 192.168.1.107:8090 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;1;  </span><br><span class="line">    server 192.168.1.107:8091 weight&#x3D;1;  </span><br><span class="line">&#125; </span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.jiqun.com alias jiqun.com; #本地域名，集群</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass   http:&#x2F;&#x2F;web_servers;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>集群服务器策略参数：<br>1）down<br>表示单前的server暂时不参与负载<br>2）weight<br>默认为1.weight越大，负载的权重就越大。<br>3）max_fails<br>允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>4）fail_timeout<br>max_fails 次失败后，暂停的时间。<br>5）backup<br>其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</p><blockquote><p>upstream为代理的集群服务器，可以通过不同的参数制定不同的访问策略。<br>proxy_pass中的集群服务器名字要跟upstream后面的名字保持一样。</p></blockquote><h3 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h3><p>Nginx 的 upstream目前支持的分配算法：<br><strong>1、轮询—1：1 轮流处理请求（默认）</strong><br>每个请求按时间顺序逐一分配到不同的应用服务器，如果应用服务器down掉，自动剔除，剩下的继续轮询。<br><strong>2、权重 ——you can you up</strong><br>通过配置权重，指定轮询几率，权重和访问比率成正比，用于应用服务器性能不均的情况。<br><strong>3、ip_哈希算法</strong><br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个应用服务器，可以解决session共享的问题。</p><h3 id="搭建高可用的Nginx服务器集群"><a href="#搭建高可用的Nginx服务器集群" class="headerlink" title="搭建高可用的Nginx服务器集群"></a>搭建高可用的Nginx服务器集群</h3><p>除了要实现网站的高可用，也就是提供n多台服务器用于发布相同的服务，添加负载均衡服务器分发请求以保证在高并发下各台服务器能相对饱和的处理请求。同样，负载均衡服务器也需要高可用，以防如果负载均衡服务器挂掉了，后面的应用服务器也紊乱无法工作。</p><p>实现高可用的方案：添加冗余。添加n台nginx服务器以避免发生上述单点故障。<br>具体方案详见下文：<a href="http://www.cnblogs.com/youzhibing/p/5021224.html" target="_blank" rel="external nofollow noopener noreferrer">keepalive+nginx实现负载均衡高可用</a>，也可参考：<a href="http://www.cnblogs.com/youzhibing/p/5061786.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.cnblogs.com/youzhibing/p/5061786.html</a></p>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter压力测试使用指南</title>
    <url>/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan.html</url>
    <content><![CDATA[<h3 id="一、安装java"><a href="#一、安装java" class="headerlink" title="一、安装java"></a>一、安装java</h3><p>1、访问<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk12-downloads-5295953.html" target="_blank" rel="external nofollow noopener noreferrer">Java官网</a>，下载<code>jdk-12_windows-x64_bin.zip</code>安装包<br>2、环境变量配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME   D:\Program Files\jdk-12</span><br><span class="line">CLASSPATH   .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br><span class="line">Path        %JAVA_HOME%\bin</span><br></pre></td></tr></table></figure><h3 id="二、安装Jmeter"><a href="#二、安装Jmeter" class="headerlink" title="二、安装Jmeter"></a>二、安装Jmeter</h3><p>访问<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="external nofollow noopener noreferrer">Apache官网</a>，在页面上找到zip压缩包<a href="http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-5.1.1.zip" target="_blank" rel="external nofollow noopener noreferrer">apache-jmeter-5.1.1.zip</a>并下载，解压即安装，本文解压路径为<code>G:\软件\apache-jmeter-5.1.1\bin</code>。</p><h3 id="三、汉化Jmeter"><a href="#三、汉化Jmeter" class="headerlink" title="三、汉化Jmeter"></a>三、汉化Jmeter</h3><p>方法一：</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-e86e855c8ef8be61.png"><a id="more"></a><p>方法二：<br>打开Jmeter安装目录<code>apache-jmeter-5.1.1\bin</code>，找到<code>jmeter.properties</code>文件<br>将第37行修改为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language&#x3D;zh_CN</span><br></pre></td></tr></table></figure><p>去掉前面的#，重启Jmeter后就是中文界面了。</p><h3 id="四、创建测试计划"><a href="#四、创建测试计划" class="headerlink" title="四、创建测试计划"></a>四、创建测试计划</h3><p>打开cmd窗口，切换到<code>G:\软件\apache-jmeter-5.1.1\bin</code>目录，运行命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmeter</span><br></pre></td></tr></table></figure><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-76dfc6ff9688af61.png"><h4 id="4-1-添加测试计划"><a href="#4-1-添加测试计划" class="headerlink" title="4.1 添加测试计划"></a>4.1 添加测试计划</h4><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-66478c81a8ef9408.png"><h4 id="4-2-添加线程组"><a href="#4-2-添加线程组" class="headerlink" title="4.2 添加线程组"></a>4.2 添加线程组</h4><p>在“创业股测试计划”上右键 【添加】–&gt;【线程(用户)】–&gt;【线程组】。</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-c13945d6d10c3f04.png"><p>这里的线程可以理解成一个访客。<br>设置线程数和循环次数，这里设置线程数为10000（个用户），循环5次（每个用户访问5次），等同于50000次访问。</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-4c48b06b9a69a281.png"><h4 id="4-3-添加请求类型"><a href="#4-3-添加请求类型" class="headerlink" title="4.3 添加请求类型"></a>4.3 添加请求类型</h4><h6 id="4-3-1-设置http请求默认值"><a href="#4-3-1-设置http请求默认值" class="headerlink" title="4.3.1 设置http请求默认值"></a>4.3.1 设置http请求默认值</h6><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-9ed06b87d213a4bb.png"> <img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-9c1fe9cd9ad1e1ee.png"><h6 id="4-3-2-添加HTTP请求"><a href="#4-3-2-添加HTTP请求" class="headerlink" title="4.3.2 添加HTTP请求"></a>4.3.2 添加HTTP请求</h6><p>如下图，添加http请求：</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-ad498155c4b00af0.png"><p>选择请求方式，添加接口路径，如果是POST提交方式，且以json方式提交数据，在下方选择消息体数据，填写json参数即可。</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-9f7135ad18e8ac46.png"><h6 id="4-3-3-添加HTTP头部信息"><a href="#4-3-3-添加HTTP头部信息" class="headerlink" title="4.3.3 添加HTTP头部信息"></a>4.3.3 添加HTTP头部信息</h6><p>在我们刚刚创建的线程组上右键 【添加】–&gt;【配置元件】–&gt;【HTTP信息头管理器】。<br>因为我们要传输的数据为json，所以设置一个 <code>Content-Type:application/json</code></p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-0575f14bc4ae5555.png"><h4 id="4-4-添加断言"><a href="#4-4-添加断言" class="headerlink" title="4.4 添加断言"></a>4.4 添加断言</h4><p>添加一个简单的200响应断言：</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-5ffb0ec0b735ebc7.png"><p>添加一个返回结果断言：<br>比如返回结果：<code>&quot;Result&quot;:1</code></p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-8cf787fc378ee7f3.png"><h4 id="4-5-添加察看结果树"><a href="#4-5-添加察看结果树" class="headerlink" title="4.5 添加察看结果树"></a>4.5 添加察看结果树</h4><p>在线程组上右键 【添加】–&gt;【监听器】–&gt;【察看结果树】。<br>在察看结果树窗口中可以看到每一次请求，和每一次请求传递的参数值，可以指定将每次请求的结果存入到某一个文件路径。</p><h4 id="4-6-添加汇总报告"><a href="#4-6-添加汇总报告" class="headerlink" title="4.6 添加汇总报告"></a>4.6 添加汇总报告</h4><p>英文名：Summary Report，在线程组上右键 【添加】–&gt;【监听器】–&gt;【汇总报告】，在汇总报告窗口中可以指定将每次请求的结果存入到某一个文件路径。</p><blockquote><p>报告详解：<br>Label：每个 JMeter 的 element（例如 HTTP Request）都有一个 Name 属性，这里显示的就是 Name 属性的值<br>Samples：表示你这次测试中一共发出了多少个请求，如果模拟10个用户，每个用户迭代10次，那么这里显示100<br>Average：平均响应时间——默认情况下是单个 Request 的平均响应时间，当使用了 Transaction Controller 时，也可以以Transaction 为单位显示平均响应时间<br>Median：中位数，也就是 50％ 用户的响应时间<br>90% Line：90％ 用户的响应时间<br>Note：关于 50％ 和 90％ 并发用户数的含义，请参考下文<br><a href="http://www.cnblogs.com/jackei/archive/2006/11/11/557972.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.cnblogs.com/jackei/archive/2006/11/11/557972.html</a><br>Min：最小响应时间<br>Max：最大响应时间<br>Error%：本次测试中出现错误的请求的数量/请求的总数<br>Throughput：吞吐量——默认情况下表示每秒完成的请求数（Request per Second），当使用了 Transaction Controller 时，也可以表示类似 LoadRunner 的 Transaction per Second 数<br>KB/Sec：每秒从服务器端接收到的数据量，相当于LoadRunner中的Throughput/Sec</p></blockquote><h3 id="五、设置动态参数"><a href="#五、设置动态参数" class="headerlink" title="五、设置动态参数"></a>五、设置动态参数</h3><h5 id="5-1-生成时间戳"><a href="#5-1-生成时间戳" class="headerlink" title="5.1 生成时间戳"></a>5.1 生成时间戳</h5><p>找到”Tools”菜单 &gt; 函数助手对话框，时间参数格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;__time(yyyy-MM-dd HH:MM:SS,)&#125;  &#x2F;&#x2F;返回：2019-04-18 10:04:549</span><br><span class="line">$&#123;__time(yyyy-MM-dd HH:MM:ss,)&#125;  &#x2F;&#x2F;返回：2019-04-18 10:04:54</span><br><span class="line">$&#123;__time(yyyy-MM-dd,)&#125;  &#x2F;&#x2F;返回：2019-04-18</span><br><span class="line">$&#123;__time(,)&#125; &#x2F;&#x2F;返回：1555554692145，默认该公式精确到毫秒级别，13位数</span><br><span class="line">$&#123;__time(&#x2F;1000,)&#125;  &#x2F;&#x2F;返回：1555554735，该公式精确到秒级别，10位数</span><br><span class="line">$&#123;__time(YMDHMS,)&#125;  &#x2F;&#x2F;返回：20190418-103524</span><br></pre></td></tr></table></figure><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-d383a7a18832feac.png"><p>调试好想要的参数格式后，点击测试计划，在右侧的“用户定义的变量”中，添加一个变量，名称为<code>nowtime</code>，值如：<code>${__time(yyyy-MM-dd HH:MM:SS,)}</code><br>然后可以在参数中加入这个变量：<code>${nowtime}</code>，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;Username&quot;: &quot;jmetertest$&#123;auto_increment&#125;&quot;,</span><br><span class="line">	&quot;Usertype&quot;: 0,</span><br><span class="line">	&quot;RegisterationTime&quot;: &quot;$&#123;nowtime&#125;&quot;,</span><br><span class="line">	&quot;ProxyPlatformID&quot;: &quot;GuanYong001&quot;,</span><br><span class="line">	&quot;Person&quot;: &#123;</span><br><span class="line">		&quot;name&quot;: &quot;欧阳$&#123;auto_increment&#125;&quot;,</span><br><span class="line">		&quot;gender&quot;: 0,</span><br><span class="line">		&quot;ID&quot;: &quot;332623198507235699&quot;,</span><br><span class="line">		&quot;phoneNum&quot;: &quot;1521668****&quot;,</span><br><span class="line">		&quot;address&quot;: &quot;上海市徐汇区XX路XX号XX室&quot;,</span><br><span class="line">		&quot;nation&quot;: &quot;中国&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;Company&quot;: &#123;</span><br><span class="line">		&quot;name&quot;: &quot;XXX科技有限公司&quot;,</span><br><span class="line">		&quot;creditcode&quot;: &quot;91330104MA2CETR334&quot;,</span><br><span class="line">		&quot;contactpersion&quot;: &quot;欧阳&quot;,</span><br><span class="line">		&quot;contactphone&quot;: &quot;1521668****&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-定义随机数"><a href="#5-2-定义随机数" class="headerlink" title="5.2 定义随机数"></a>5.2 定义随机数</h5><p>如同5.1节中，在函数助手对话框中，选择系统函数<code>__Random</code>，填写一个范围的最小值和最大值，点击生成，如<code>${__Random(1,200,)}</code>，将产生1~200之间的随机数。</p><h5 id="5-3-定义自增变量"><a href="#5-3-定义自增变量" class="headerlink" title="5.3 定义自增变量"></a>5.3 定义自增变量</h5><p>在线程组上右键 【添加】&gt;【配置元件】&gt;【计数器】。</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-7e21889567786e74.png"><p>添加完成后，可以在参数中引用变量名：<code>${auto_increment}</code>，如5.1节中的参数引用。</p><h5 id="5-4-读取CSV文件"><a href="#5-4-读取CSV文件" class="headerlink" title="5.4 读取CSV文件"></a>5.4 读取CSV文件</h5><p><strong>第一种读取方式：</strong><br>新建文件test.txt，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaa,111</span><br><span class="line">bbb,222</span><br><span class="line">ccc,333</span><br><span class="line">ddd,444</span><br><span class="line">eee,555</span><br></pre></td></tr></table></figure><p>在函数助手对话框中，选择系统函数<code>__CSVRead</code>，在第一个参数中，填写文件路径，第二个参数填写第几列数据，注意列数是从0开始计的。<br>读取规则：<br>一行数据为一组数据，一行多列数据用逗号隔开，多线程（访客）访问时，一行数据分配给一个线程。在参数中引用，如：<br><code>${__CSVRead(F:\软件\apache-jmeter-5.1.1\test_plan\test.txt,1)}</code>，读取第2列数据。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Company&quot;: &#123;</span><br><span class="line">		&quot;name&quot;: &quot;XXX科技有限公司$&#123;__CSVRead(F:\软件\apache-jmeter-5.1.1\test_plan\test.txt,1)&#125;&quot;,</span><br><span class="line">		&quot;creditcode&quot;: &quot;91330104MA2CETR334&quot;,</span><br><span class="line">		&quot;contactpersion&quot;: &quot;欧阳&quot;,</span><br><span class="line">		&quot;contactphone&quot;: &quot;1521668****&quot;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><p>在察看结果树中，查看每次请求，可以看到每次请求的参数<code>name</code>就会带上CSV文件中的内容，以达到每次请求参数数据不一样。</p><p><strong>第二种读取方式：</strong><br>在线程组上右键【添加】&gt;【配置元件】&gt;【CSV数据文件设置】</p><img data-src="/images/loading.gif" data-original="/blog/testing/jmeter-ya-li-ce-shi-shi-yong-zhi-nan/2476164-772b2eac490de8e2.png"><p>在参数中引用，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;Username&quot;: &quot;jmetertest$&#123;auto_increment&#125;&quot;,</span><br><span class="line">	&quot;Usertype&quot;: 0,</span><br><span class="line">	&quot;RegisterationTime&quot;: &quot;$&#123;nowtime&#125;&quot;,</span><br><span class="line">	&quot;ProxyPlatformID&quot;: &quot;GuanYong001&quot;,</span><br><span class="line">	&quot;Person&quot;: &#123;</span><br><span class="line">		&quot;name&quot;: &quot;欧阳$&#123;auto_increment&#125;&quot;,</span><br><span class="line">		&quot;gender&quot;: 0,</span><br><span class="line">		&quot;ID&quot;: &quot;332623198507235699&quot;,</span><br><span class="line">		&quot;phoneNum&quot;: &quot;1521668****&quot;,</span><br><span class="line">		&quot;address&quot;: &quot;上海市徐汇区XX路XX号XX室$&#123;tmpName&#125;&quot;,</span><br><span class="line">		&quot;nation&quot;: &quot;中国$&#123;tmpNum&#125;&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;Company&quot;: &#123;</span><br><span class="line">		&quot;name&quot;: &quot;XXX科技有限公司$&#123;__CSVRead(F:\软件\apache-jmeter-5.1.1\test_plan\test.txt,1)&#125;&quot;,</span><br><span class="line">		&quot;creditcode&quot;: &quot;91330104MA2CETR334&quot;,</span><br><span class="line">		&quot;contactpersion&quot;: &quot;欧阳&quot;,</span><br><span class="line">		&quot;contactphone&quot;: &quot;1521668****&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>address</code>和<code>nation</code>字段，每个线程发起请求时，参数都会去文件中取相应字段的数据，一次一行数据。</p><h3 id="六、执行测试计划"><a href="#六、执行测试计划" class="headerlink" title="六、执行测试计划"></a>六、执行测试计划</h3><p>只有在调试测试计划时使用GUI模式。要运行实际压力测试，推荐使用CLI模式。<br>这里执行的命令为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmeter -n -t ..&#x2F;test_plan&#x2F;copyright_chain.jmx -l ..&#x2F;test_plan&#x2F;result&#x2F;result.txt -e -o ..&#x2F;test_plan&#x2F;webreport</span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>test_plan/copyright_chain.jmx 为测试计划文件路径<br>test_plan/result/result.txt 为测试结果文件路径<br>test_plan/webreport 为web报告保存路径。</p></blockquote><blockquote><p>jmeter命令参数：<br>-n 指定JMeter将以cli模式运行<br>-t [指定测试计划的JMX文件路径，包括文件名]。<br>-l [指定样本结果存放路径，包括文件名]。<br>-j [指定日志文件存放路径，包括文件名]。<br>-r 在JMeter属性“ remote_hosts ” 指定的服务器中运行测试<br>-R [远程服务器列表]在指定的远程服务器中运行测试<br>-G [CSV文件的路径]仅生成报告仪表板<br>-e 负载测试后生成报告仪表板<br>-o 测试完成后生成报告仪表板的存放路径，此文件夹不能已经存在<br>该脚本还允许您指定可选的防火墙/代理服务器信息：<br>-H [代理服务器主机名或IP地址]<br>-P [代理服务器端口]</p></blockquote><h3 id="七、查看测试报告"><a href="#七、查看测试报告" class="headerlink" title="七、查看测试报告"></a>七、查看测试报告</h3><p>略</p><h3 id="八、Jmeter目录结构解析"><a href="#八、Jmeter目录结构解析" class="headerlink" title="八、Jmeter目录结构解析"></a>八、Jmeter目录结构解析</h3><p>JMeter 属性在jmeter.properties中定义<br><a href="https://blog.csdn.net/jinganglong123/article/details/76427544" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/jinganglong123/article/details/76427544</a></p><h3 id="九、Jmeter执行顺序"><a href="#九、Jmeter执行顺序" class="headerlink" title="九、Jmeter执行顺序"></a>九、Jmeter执行顺序</h3><blockquote><p>配置元素<br>预处理器<br>计时器<br>取样<br>后处理器（除非SampleResult为null）<br>断言（除非SampleResult为null）<br>监听器</p></blockquote><p>参考：<br><a href="https://blog.csdn.net/u012111923/article/details/80705141" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/u012111923/article/details/80705141</a> JMeter性能测试，完整入门篇<br><a href="https://blog.csdn.net/relax_hb/article/details/72831287" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/relax_hb/article/details/72831287</a><br><a href="https://www.cnblogs.com/stulzq/p/8971531.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/stulzq/p/8971531.html</a><br><a href="https://www.cnblogs.com/summer-mm/p/7717812.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/summer-mm/p/7717812.html</a><br><a href="https://www.cnblogs.com/st-leslie/p/5185376.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/st-leslie/p/5185376.html</a><br><a href="https://blog.csdn.net/lluozh2015/article/details/73863851" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/lluozh2015/article/details/73863851</a> 时间变量参数<br><a href="https://blog.csdn.net/u012111923/article/category/7738266" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/u012111923/article/category/7738266</a><br><a href="https://www.cnblogs.com/jaychang/p/7022071.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/jaychang/p/7022071.html</a> Result结果断言</p>]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT Token原理解析</title>
    <url>/blog/php/jwt-token-yuan-li-jie-xi.html</url>
    <content><![CDATA[<h4 id="一、JWT-Token构成"><a href="#一、JWT-Token构成" class="headerlink" title="一、JWT Token构成"></a>一、JWT Token构成</h4><blockquote><p>头部Header . 载荷Payload . 签名Signature</p></blockquote><p><strong>1、头部 Header</strong><br>声明了签名算法，如：<code>[&#39;typ&#39;=&gt; &#39;JWT&#39;, &#39;alg&#39; =&gt; &#39;HS256&#39;]</code><br>将以上数据定义成数组，再通过json_encode序列化，base64编码后得到头部信息。</p><p><strong>2、载荷 Payload</strong><br>即装载的数据，官方定义但不强制使用的数据字段：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">nbf (Not Before)：生效时间，在此之前是无效的</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure><p>将以上数据定义成数组，再通过json_encode序列化，base64编码后得到载荷信息。</p><a id="more"></a><blockquote><p>注意：<br>sub：为JWT所面向的用户，userid，是否使用是可选的；<br>jti：为 jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。</p></blockquote><p><strong>3、签名 Signature</strong><br>使用HMAC对<code>头部+点+载荷</code>生成信息摘要，即签名</p><h4 id="二、JWT-Token优缺点"><a href="#二、JWT-Token优缺点" class="headerlink" title="二、JWT Token优缺点"></a>二、JWT Token优缺点</h4><p><strong>优点：</strong></p><ul><li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用</li><li>因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息</li><li>便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的</li><li>它不需要在服务端保存会话信息, 所以它易于应用的扩展</li></ul><p><strong>缺点（安全相关）：</strong></p><ul><li>不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分</li><li>保护好secret私钥，该私钥非常重要</li><li>如果可以，请使用https协议</li></ul><h4 id="三、基于tymon-jwt-auth包的源码实现"><a href="#三、基于tymon-jwt-auth包的源码实现" class="headerlink" title="三、基于tymon/jwt-auth包的源码实现"></a>三、基于tymon/jwt-auth包的源码实现</h4><p>完整代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//laravel </span></span><br><span class="line"><span class="comment">//tymon/jwt-auth包 原理解析</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JWT头部</span></span><br><span class="line"><span class="comment">//签名算法支持：HS256, HS384, HS512</span></span><br><span class="line">$header = [<span class="string">'typ'</span>=&gt; <span class="string">'JWT'</span>, <span class="string">'alg'</span> =&gt; <span class="string">'HS256'</span>]; <span class="comment">//&#123;"typ":"JWT","alg":"HS256"&#125;</span></span><br><span class="line">$header = base64UrlEncode(json_encode($header)); <span class="comment">//序列化并Base64编码</span></span><br><span class="line"><span class="comment">//json_last_error() != JSON_ERROR_NONE 可判断json_encode是否执行成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JWT载荷</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">iss (issuer)：签发人</span></span><br><span class="line"><span class="comment">iat (Issued At)：签发时间</span></span><br><span class="line"><span class="comment">exp (expiration time)：过期时间</span></span><br><span class="line"><span class="comment">nbf (Not Before)：生效时间，在此之前是无效的</span></span><br><span class="line"><span class="comment">jti (JWT ID)：编号</span></span><br><span class="line"><span class="comment">sub (subject)：主题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$time = time();</span><br><span class="line">$userId = <span class="string">'7525571047194611'</span>; <span class="comment">//用户雪花ID </span></span><br><span class="line">$claims = [</span><br><span class="line">    <span class="string">'iss'</span> =&gt; <span class="string">'ipcloud-api'</span>,</span><br><span class="line">    <span class="string">'iat'</span> =&gt; $time,</span><br><span class="line">    <span class="string">'exp'</span> =&gt; intval($time) + <span class="number">604800</span>, <span class="comment">//7天=7*24*60*60</span></span><br><span class="line">    <span class="string">'nbf'</span> =&gt; $time,</span><br><span class="line">    <span class="string">'jti'</span> =&gt; sha1($userId.rand(<span class="number">100000</span>, <span class="number">999999</span>)),</span><br><span class="line">    <span class="string">'sub'</span> =&gt; $userId,</span><br><span class="line">]; <span class="comment">//&#123;"iss":"ipcloud-api","iat":1591068997,"exp":1591673797,"nbf":1591068997,"jti":"ac0d074c18c97ecbadfaaf0b6003ddc27a80356a","sub":"7525571047194611"&#125;;</span></span><br><span class="line">$payload = base64UrlEncode(json_encode($claims)); <span class="comment">//序列化并Base64编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//签名密钥</span></span><br><span class="line">$key = <span class="string">'7b21ff514564ea1be967ff7433485b00'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JWT签名</span></span><br><span class="line"><span class="comment">//用header+payload创建签名：使用HMAC生成信息摘要</span></span><br><span class="line">$signature = hash_hmac(<span class="string">'sha256'</span>, implode(<span class="string">'.'</span>, [$header, $payload]), $key, <span class="keyword">true</span>); <span class="comment">//最后一个参数设置成true，则返回二进制数据，否则返回16进制小写字符串格式表示的信息摘要</span></span><br><span class="line">$signature = base64UrlEncode($signature);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出JWT Token</span></span><br><span class="line">$token = implode(<span class="string">'.'</span>, [$header, $payload, $signature]);</span><br><span class="line"><span class="keyword">echo</span> $token;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encodes to base64url</span></span><br><span class="line"><span class="comment"> * 一般而言接口提供方，都会要求对加密串进行base64urlencode，防止签名串被特殊字符分割，导致验证无法通过。</span></span><br><span class="line"><span class="comment"> * 因为标准的Base64编码会出现+、/和=，所以不适合把Base64编码后的字符串放到URL中。一种针对URL的Base64编码可以在URL中使用的Base64编码，它仅仅是把+变成-，/变成_</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64UrlEncode</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'='</span>, <span class="string">''</span>, strtr(base64_encode($data), <span class="string">'+/'</span>, <span class="string">'-_'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Base64编码，是一种编码算法，不是加密算法，主要是为了将二进制数据转换成文本格式。<br>Base64编码的缺点是传输效率会降低，因为它把原始数据的长度增加了1/3。<br>因为标准的Base64编码会出现+、/和=，所以不适合把Base64编码后的字符串放到URL中。一种针对URL的Base64编码可以在URL中使用的Base64编码，它仅仅是把+变成-，/变成_<br>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227703947297" target="_blank" rel="external nofollow noopener noreferrer">https://www.liaoxuefeng.com/wiki/1252599548343744/1304227703947297</a><br><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.ruanyifeng.com/blog/2008/06/base64.html</a> Base64编码原理</p></blockquote><blockquote><p>哈希算法又称摘要算法，是一种加密算法，主要是为了解决数据被篡改的问题。<br>使用哈希口令时，还要注意防止彩虹表攻击。</p></blockquote><p>什么是<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227729113121" target="_blank" rel="external nofollow noopener noreferrer">彩虹表</a>呢？如果只拿到MD5，从MD5反推明文口令，只能使用暴力穷举的方法。<br>然而黑客并不笨，暴力穷举会消耗大量的算力和时间。但是，如果有一个预先计算好的常用口令和它们的MD5的对照表：</p><img data-src="/images/loading.gif" data-original="/blog/php/jwt-token-yuan-li-jie-xi/2476164-cfbb0303abbc06a4.png" title="彩虹表"><p>让彩虹表失效的做法就是：加盐（salt）</p><h4 id="四、hash-hmac算法"><a href="#四、hash-hmac算法" class="headerlink" title="四、hash_hmac算法"></a>四、hash_hmac算法</h4><p>Hmac算法是一种标准的基于密钥的哈希算法，可以配合MD5、SHA-1等哈希算法，计算的摘要长度和原摘要算法长度相同。<br>在php中，hash_hmac函数能将HMAC和一部分哈希加密算法结合起来实现HMAC-SHA1、HMAC-SHA256、HMAC-MD5等算法。函数介绍如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string hash_hmac(string $algo, string $data, string $key, bool $raw_output &#x3D; false)</span><br><span class="line">algo：要使用的哈希算法名称，可以是上述提到的md5,sha1等</span><br><span class="line">data：要进行哈希运算的消息，也就是需要加密的明文。</span><br><span class="line">key：使用HMAC生成信息摘要是所使用的密钥。</span><br><span class="line">raw_output：该参数为可选参数，默认为false，如果设为true，则返回原始二进制数据表示的信息摘要，否则返回16进制小写字符串格式表示的信息摘要（注意是16进制数，而非简单的字母加数字）。</span><br><span class="line">另外：如果algo参数指定的不是受支持的算法，将返回false。</span><br></pre></td></tr></table></figure><h4 id="五、tymon-jwt-auth包关键文件或代码摘要"><a href="#五、tymon-jwt-auth包关键文件或代码摘要" class="headerlink" title="五、tymon/jwt-auth包关键文件或代码摘要"></a>五、tymon/jwt-auth包关键文件或代码摘要</h4><p>vendor\lcobucci\jwt\src\Signer\Hmac\Sha256.php //$signer签名者<br>vendor\lcobucci\jwt\src\Builder.php //Token构建<br>vendor\lcobucci\jwt\src\Signer\BaseSigner.php<br>vendor\lcobucci\jwt\src\Token.php<br>vendor\tymon\jwt-auth\src\Providers\JWT\Lcobucci.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a JSON Web Token.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $payload</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Tymon\JWTAuth\Exceptions\JWTException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">(array $payload)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Remove the signature on the builder instance first.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;builder-&gt;unsign();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($payload <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;builder-&gt;set($key, $value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;builder-&gt;sign(<span class="keyword">$this</span>-&gt;signer, <span class="keyword">$this</span>-&gt;getSigningKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JWTException(<span class="string">'Could not create token: '</span>.$e-&gt;getMessage(), $e-&gt;getCode(), $e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (string) <span class="keyword">$this</span>-&gt;builder-&gt;getToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode a JSON Web Token.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Tymon\JWTAuth\Exceptions\JWTException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($token)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $jwt = <span class="keyword">$this</span>-&gt;parser-&gt;parse($token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException(<span class="string">'Could not decode token: '</span>.$e-&gt;getMessage(), $e-&gt;getCode(), $e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! $jwt-&gt;verify(<span class="keyword">$this</span>-&gt;signer, <span class="keyword">$this</span>-&gt;getVerificationKey())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException(<span class="string">'Token Signature could not be verified.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Collection($jwt-&gt;getClaims()))-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">($claim)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> is_object($claim) ? $claim-&gt;getValue() : $claim;</span><br><span class="line">        &#125;)-&gt;toArray();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>vendor\lcobucci\jwt\src\Builder.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the resultant token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span><span class="params">(Signer $signer = null, Key $key = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $signer = $signer ?: <span class="keyword">$this</span>-&gt;signer;</span><br><span class="line">        $key = $key ?: <span class="keyword">$this</span>-&gt;key;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($signer <span class="keyword">instanceof</span> Signer) &#123;</span><br><span class="line">            $signer-&gt;modifyHeader(<span class="keyword">$this</span>-&gt;headers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $payload = [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;encoder-&gt;base64UrlEncode(<span class="keyword">$this</span>-&gt;encoder-&gt;jsonEncode(<span class="keyword">$this</span>-&gt;headers)),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;encoder-&gt;base64UrlEncode(<span class="keyword">$this</span>-&gt;encoder-&gt;jsonEncode(<span class="keyword">$this</span>-&gt;claims))</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $signature = <span class="keyword">$this</span>-&gt;createSignature($payload, $signer, $key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($signature !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            $payload[] = <span class="keyword">$this</span>-&gt;encoder-&gt;base64UrlEncode($signature);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Token(<span class="keyword">$this</span>-&gt;headers, <span class="keyword">$this</span>-&gt;claims, $signature, $payload);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><p><a href="https://learnku.com/articles/10885/full-use-of-jwt" target="_blank" rel="external nofollow noopener noreferrer">https://learnku.com/articles/10885/full-use-of-jwt</a><br><a href="https://blog.csdn.net/mengzuchao/article/details/78473577" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/mengzuchao/article/details/78473577</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943717668160" target="_blank" rel="external nofollow noopener noreferrer">https://www.liaoxuefeng.com/wiki/1252599548343744/1255943717668160</a> 加密与安全（廖雪峰）<br><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.ruanyifeng.com/blog/2008/06/base64.html</a> Base64编码原理</p>]]></content>
      <categories>
        <category>Laravel</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>JWTtoken</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解RabbitMQ的原理</title>
    <url>/blog/architecture/shen-ru-li-jie-rabbitmq-de-yuan-li.html</url>
    <content><![CDATA[<h4 id="什么是队列（queue）？"><a href="#什么是队列（queue）？" class="headerlink" title="什么是队列（queue）？"></a>什么是队列（queue）？</h4><p>队列是一种存储、组织数据的数据结构，最大的特点就是先进先出（FIFO）。</p><h4 id="什么是消息队列？"><a href="#什么是消息队列？" class="headerlink" title="什么是消息队列？"></a>什么是消息队列？</h4><p>服务之间最常见的通信方式是直接调用彼此来通信，消息从一端发出后立即就可以达到另一端，称为即时消息通讯（同步通信)；<br>消息从某一端发出后，首先进入一个容器进行临时存储，当达到某种条件后，再由这个容器发送给另一端，称为延迟消息通讯 （异步通信）。<br>而容器的一个具体实现就是MQ(Message Queue)。<br>可以通过<a href="https://www.zhihu.com/question/34243607/answer/140732170" target="_blank" rel="external nofollow noopener noreferrer">小红和小明读书的故事</a>来理解一下消息队列。</p><h4 id="什么是RabbitMQ？"><a href="#什么是RabbitMQ？" class="headerlink" title="什么是RabbitMQ？"></a>什么是RabbitMQ？</h4><p>RabbitMQ是一个实现了AMQP（Advanced Message Queuing Protocol）高级消息队列协议的消息队列服务，用Erlang语言编写，Erlang语言是为电话交换机开发的语言，天生自带高并发光环，和高可用特性。</p><a id="more"></a><p>rabbitmq模拟器：<code>http://tryrabbitmq.com/</code>，可以直观的理解消息的传递方式。</p><blockquote><p>使用方法：<br>1、直接将画框左面的图标拖进画图区，构建想要的拓扑图；<br>2、按住ALT或SHIFT键，鼠标点击需要连接的图标（如果不能连接，试试相反方向，例如先点击queue再点击exchange） ;<br>3、双击击图标进行编辑设置各项功能；<br>4、binding key不在queue上设定，双击击连线中间bindingkey。</p></blockquote><h4 id="什么是AMQP协议？"><a href="#什么是AMQP协议？" class="headerlink" title="什么是AMQP协议？"></a>什么是AMQP协议？</h4><p>全称为Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议，是一个通用的应用层协议。消息发送与接受的双方遵守这个协议可以实现异步通讯，这个协议约定了消息的格式和工作方式。</p><h4 id="为什么选择RabbitMQ？"><a href="#为什么选择RabbitMQ？" class="headerlink" title="为什么选择RabbitMQ？"></a>为什么选择RabbitMQ？</h4><p>现在的市面上有很多MQ可以选择，比如ActiveMQ、ZeroMQ、Appche Qpid，那问题来了为什么要选择RabbitMQ？</p><ul><li>除了Qpid，RabbitMQ是唯一一个实现了AMQP标准的消息服务器；</li><li>可靠性，RabbitMQ的持久化支持，保证了消息的稳定性；</li><li>高并发，RabbitMQ使用了Erlang开发语言，Erlang是为电话交换机开发的语言，天生自带高并发光环，和高可用特性；</li><li>集群部署简单，正是应为Erlang使得RabbitMQ集群部署变的超级简单；</li><li>社区活跃度高，根据网上资料来看，RabbitMQ也是首选。</li></ul><h4 id="RabbitMQ的流程与原理"><a href="#RabbitMQ的流程与原理" class="headerlink" title="RabbitMQ的流程与原理"></a>RabbitMQ的流程与原理</h4><img data-src="/images/loading.gif" data-original="/blog/architecture/shen-ru-li-jie-rabbitmq-de-yuan-li/2476164-f374c896d31bb2ea.png" title="流程示例"><p><strong>角色</strong><br>生产者：消息的创建者，负责创建和推送数据到消息服务器；<br>消费者：消息的接收方，用于处理数据和确认消息；<br>代理人：就是RabbitMQ本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。</p><p><strong>名词解释</strong><br>ConnectionFactory（连接管理器）：应用程序与Rabbit之间建立连接的管理器，程序代码中使用；<br>Channel（信道）：消息推送使用的通道，1个或多个；<br>Broker（代理人）：即RabbitMQ Server，不是集群，就是1个，否则就是多个；<br>Virtual host（虚拟机）：简称vhost，1个或多个，当多个不同的用户使用同一个RabbitMQ server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange／queue<br>Exchange（交换器）：用于接受、分配消息，1个或多个；<br>Queue（队列）：用于存储生产者的消息，1个或多个；<br>RoutingKey（路由键）：用于把生产者的数据分配到交换器上；<br>BindingKey（绑定键）：用于把交换器的消息绑定到队列上。</p><blockquote><p>个人理解RoutingKey和BindingKey是指同一个关系，只不过是站在消费者和和生产者的角度，叫法不一样，取名不一样。</p></blockquote><p><strong>原理</strong><br>1、建立信道（Channel）<br>首先必须连接到RabbitMQ才能发布和消费消息，那怎么连接和发送消息的呢？<br>我们的应用程序和Broker（RabbitMQ Server）之间会创建一个TCP连接，一旦TCP打开，并通过了认证，认证就是我们试图连接RabbitMQ之前发送的RabbitMQ服务器连接信息、用户名和密码，有点像程序连接数据库，一旦认证通过你的应用程序和RabbitMQ就创建了一条AMQP信道（Channel）。<br>信道是创建在“真实”TCP上的虚拟连接，AMQP命令都是通过信道发送出去的，每个信道都会有一个唯一的ID，不论是发布消息，订阅队列或者介绍消息都是通过信道完成的。<br>连接管理器管理着所有的信道。</p><p>2、创建/定位虚拟机（vhost）<br>默认vhost为/，在建立连接时将作为参数传递给Broker（可以理解就是RabbitMQ本身），Broker会帮助我们创建好vhost，每个RabbitMQ可以创建多个vhost，每个vhost可以理解成一个mini版的RabbitMQ，个人觉得也可以把vhost理解成一个命名空间。</p><p>3、创建/定位队列（Queue），存放消息<br>如上图所示，创建队列1（名称为Q1），创建完队列后，会将队列1（Q1）与交换机1（E1）建议绑定关系（E1Q1），这个关系名称我们称之为BindingKey。<br>到了这一步，生产者可以通过BindingKey（E1Q1）找到目标队列（Q1），将消息存入目标队列中（Q1）。</p><p>4、监听消息队列，消费消息<br>如上图所示，消费者1通过建立信道，提供RoutingKey（E1Q1），即可监听到目标队列（Q1），处理生产者1发送的消息。</p><h4 id="RabbitMQ的消息转发类型（Exchange-type）"><a href="#RabbitMQ的消息转发类型（Exchange-type）" class="headerlink" title="RabbitMQ的消息转发类型（Exchange type）"></a>RabbitMQ的消息转发类型（Exchange type）</h4><blockquote><p>如果把RabbitMQ比作一个传递消息的游戏，那么以上提到角色和名词都是游戏参与者，为了让游戏变得多样有趣（满足不同需求），RabbitMQ还有几个游戏规则，就是我们要说的消息转发类型。</p></blockquote><p>有3种玩法：<br>1、发布与订阅（Direct exchange）<br><strong>推荐使用这种</strong>，原理是通过消息中的routing key，与binding中的binding-key进行比对，若二者匹配，则将消息发送到这个消息队列或者获取消息。<br>我们用上面提到的<a href="http://tryrabbitmq.com/" target="_blank" rel="external nofollow noopener noreferrer">rabbitmq模拟器</a>来示意一下：</p><img data-src="/images/loading.gif" data-original="/blog/architecture/shen-ru-li-jie-rabbitmq-de-yuan-li/2476164-d059b22dda506b36.gif"><p>2、广播（Fanout exchange）<br>复制分发路由</p><img data-src="/images/loading.gif" data-original="/blog/architecture/shen-ru-li-jie-rabbitmq-de-yuan-li/2476164-56da51c5b9d254c1.gif"><p>3、主题（topic exchange）<br>比如设置BindingKey为<code>*.Q1.*</code>，那么<code>E1.Q1.C1</code>就会匹配上，消息就发送给了消费者1，如下图：</p><img data-src="/images/loading.gif" data-original="/blog/architecture/shen-ru-li-jie-rabbitmq-de-yuan-li/2476164-aae3529b58b30923.gif"><h4 id="怎样保证RabbitMQ的可靠性"><a href="#怎样保证RabbitMQ的可靠性" class="headerlink" title="怎样保证RabbitMQ的可靠性"></a>怎样保证RabbitMQ的可靠性</h4><p>在默认的情况下，重启服务器会导致消息队列丢失，那么怎么保证Rabbit在重启的时候不丢失呢？答案就是<strong>消息持久化</strong>。</p><p>当我们把消息发送到Rabbit服务器的时候，需要选择是否要进行持久化，但这并不能保证Rabbit能从崩溃中恢复，想要Rabbit消息能恢复必须满足3个条件：</p><ul><li>投递消息的时候durable设置为true，消息持久化，代码：<code>channel.queueDeclare(x, true, false, false, null)</code>，参数2设置为true持久化；<br>设置投递模式deliveryMode设置为2（持久），代码：<code>channel.basicPublish(x, x,MessageProperties.PERSISTENT_TEXT_PLAIN,x)</code>，参数3设置为存储纯文本到磁盘；</li><li>消息已经到达持久化交换器上；</li><li>消息已经到达持久化的队列。</li></ul><p><strong>持久化工作原理</strong><br>Rabbit会将我们的持久化消息写入磁盘上的持久化日志文件，等消息被消费之后，Rabbit会把这条消息标识为等待垃圾回收。</p><p><strong>持久化的缺点</strong><br>消息持久化的优点显而易见，但缺点也很明显，那就是性能，因为要写入硬盘要比写入内存性能较低很多，从而降低了服务器的吞吐量，尽管使用SSD硬盘可以使事情得到缓解，但他仍然吸干了Rabbit的性能，当消息成千上万条要写入磁盘的时候，性能是很低的。<br>所以我们要根据业务场景，选择适合自己的方式。</p><p><strong>崩溃处理</strong><br>再回到上面的流程示例图，图中标有1、2、3数字标示，下面我们来分析一下如果故障发生在1、2、3处，RabbitMQ有什么解决方案？<br>1、如图数字1处为交换器1，当生产者1把消息传给交换器1时，由于网络原因，发生了丢包怎么处理？<br>答：如何知道消息有没有正确到达交换器呢？<br>（1）、<a href="https://juejin.im/post/5b54681bf265da0f82023014" target="_blank" rel="external nofollow noopener noreferrer">通过AMQP提供的事务机制实现</a><br>（2）、<a href="https://juejin.im/post/5b54681bf265da0f82023014" target="_blank" rel="external nofollow noopener noreferrer">通过生产者消息确认机制（publisher confirm）实现</a></p><p>2、如图数字2处为队列1，当生产者1把消息已经传到了队列1，服务器断电时，消息丢失了怎么处理？<br>答：将保存在内存中的数据都写入磁盘，防止服务器重启后数据丢失。<br>有哪些数据需要持久化保存呢？<br>元数据、消息需要持久化到磁盘；<br>磁盘节点：持久化的消息在到达队列时就被写入到磁盘，并且如果可以，持久化的消息也会在内存中保存一份备份，这样可以提高一定的性能，只有在内存吃紧的时候才会从内存中清除；<br>内存节点：非持久化的消息一般只保存在内存中，在内存吃紧的时候会被换入到磁盘中，以节省内存空间。</p><p>3、如图数字3处为信道3，当消费者1把消息从队列1中取出，消息还没来得及处理就宕机丢失了怎么处理？<br>答：为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除。<br>如果一个Queue没被任何的Consumer Subscribe（订阅），当有数据到达时，这个数据会被cache，不会被丢弃。当有Consumer时，这个数据会被立即发送到这个Consumer。这个数据被Consumer正确收到时，这个数据就被从Queue中删除。<br>那么什么是正确收到呢？通过ACK。每个Message都要被acknowledged（确认，ACK）。我们可以显示的在程序中去ACK，也可以自动的ACK。如果有数据没有被ACK，那么RabbitMQ Server会把这个信息发送到下一个Consumer。</p><h4 id="消息队列的应用场景有哪些？"><a href="#消息队列的应用场景有哪些？" class="headerlink" title="消息队列的应用场景有哪些？"></a>消息队列的应用场景有哪些？</h4><h5 id="1、异步处理"><a href="#1、异步处理" class="headerlink" title="1、异步处理"></a>1、异步处理</h5><p>非核心流程异步化，提高系统响应性能</p><h5 id="2、应用解耦"><a href="#2、应用解耦" class="headerlink" title="2、应用解耦"></a>2、应用解耦</h5><p>系统不是强耦合，消息接受者可以随意增加，而不需要修改消息发送者的代码。消息发送者的成功不依赖消息接受者（比如有些银行接口不稳定，但调用方并不需要依赖这些接口）<br>不强依赖于非本系统的核心流程，对于非核心流程，可以放到消息队列中让消息消费者去按需消费，而不影响核心主流程</p><h5 id="3、最终一致性"><a href="#3、最终一致性" class="headerlink" title="3、最终一致性"></a>3、最终一致性</h5><p>最终一致性不是消息队列的必备特性，但确实可以依靠消息队列来做最终一致性的事情。<br>先写消息再操作，确保操作完成后再修改消息状态。定时任务补偿机制实现消息可靠发送接收、业务操作的可靠执行，要注意消息重复与幂等设计。<br>所有不保证100%不丢消息的消息队列，理论上无法实现最终一致性。</p><h5 id="4、广播"><a href="#4、广播" class="headerlink" title="4、广播"></a>4、广播</h5><p>只需要关心消息是否送达了队列，至于谁希望订阅，是下游的事情。</p><h5 id="5、流量削峰与流控"><a href="#5、流量削峰与流控" class="headerlink" title="5、流量削峰与流控"></a>5、流量削峰与流控</h5><p>当上下游系统处理能力存在差距的时候，利用消息队列做一个通用的“漏斗”。在下游有能力处理的时候，再进行分发。</p><h5 id="6、日志处理"><a href="#6、日志处理" class="headerlink" title="6、日志处理"></a>6、日志处理</h5><p>将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。</p><h5 id="7、消息通讯"><a href="#7、消息通讯" class="headerlink" title="7、消息通讯"></a>7、消息通讯</h5><p>消息队列一般都内置了高效的通信机制，因此也可以用于单纯的消息通讯，比如实现点对点消息队列或者聊天室等。</p><blockquote><p>个人认为消息队列的主要特点是<strong>异步处理</strong>，一切不着急马上响应结果的、非阻塞性的业务逻辑，都可以考虑使用消息队列，这样可以减少用户请求的响应时间，提高用户体验，同时也有利于业务模块之间的解耦。</p></blockquote><p>从实际项目出发，整理了如下具体场景：<br>1、用户注册时：注册完后需要发送注册成功邮件，或发送手机短信，或推荐一些感兴趣的主题或志同道合的人；<br>2、用户上传存证时：需要生成证书、需要生成PDF文档；<br>3、用户申购金融产品后：需要发送月报消息；<br>4、买火车票时：由于并发量太大，按照火车票当天的发行量，设置一个队列长度，队列满则不能再进入修补票队列；<br>5、双11秒杀商品时：先排队扣库存，再提醒用户付款；</p><h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><p>快递员A需要将一个快递给客户B。<br>原本：A亲手将快递交给B。<br>问题：B现在有很多事要做，A只能等着B处理完事情，才能把快递交给他，A就很难受了，送不了几个快递，没法赚钱了。<br>解决：设置一个快递柜，A把快递放进快递柜，就可以送下一个快递了，B啥时候有空了，去快递柜拿就行了。<br>总结：快递就是消息，快递柜就是消息队列。快递柜有很多种，菜鸟，丰巢等，RabbitMQ就是其中一种快递柜。<br>放在程序里举例：<br>客户提交订单，支付系统——&gt;订单系统，支付系统可能很快就执行完了，但是订单系统要很久才能执行完，每次支付系统都要等待订单系统，服务端速度就会很慢，现在使用RabbitMQ，支付系统支付成功后，发送一个支付成功消息到RabbitMQ，就可以返回前端了，订单系统在获取到消息后，慢慢再执行订单修改的程序。(当然，要考虑到某个系统出了异常怎么办，这个入门先不管，只管正常情况。)</p><hr><p>参考：<br><a href="https://www.zhihu.com/question/34243607" target="_blank" rel="external nofollow noopener noreferrer">https://www.zhihu.com/question/34243607</a><br><a href="https://zhuanlan.zhihu.com/p/63700605" target="_blank" rel="external nofollow noopener noreferrer">https://zhuanlan.zhihu.com/p/63700605</a><br><a href="https://www.cnblogs.com/vipstone/p/9275256.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/vipstone/p/9275256.html</a> RabbitMQ系列（二）深入了解RabbitMQ工作原理及简单使用</p>]]></content>
      <categories>
        <category>架构思维</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL配置文件my.cnf详解</title>
    <url>/blog/mysql/mysql-pei-zhi-wen-jian-my-cnf-xiang-jie.html</url>
    <content><![CDATA[<blockquote><p>my.cnf一般存放在<code>/etc/my.cnf</code>。<br><code>show variables like &#39;log_slow_queries&#39;;</code>通过这个命令可以查询配置文件中变量的值的情况</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">#password	&#x3D; your_password</span><br><span class="line"></span><br><span class="line">#指定端口</span><br><span class="line">port		&#x3D; 3306</span><br><span class="line"></span><br><span class="line">#指定socket</span><br><span class="line">socket		&#x3D; &#x2F;tmp&#x2F;mysql.sock </span><br><span class="line"></span><br><span class="line">#设置mysql-server相关信息</span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">#指定端口</span><br><span class="line">port		&#x3D; 3306</span><br><span class="line">socket		&#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">#数据库文件存放路径</span><br><span class="line">datadir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line"></span><br><span class="line">#默认存储引擎</span><br><span class="line">default_storage_engine &#x3D; InnoDB</span><br><span class="line"></span><br><span class="line">#使用transaction-isolation选项来设置服务器的缺省事务隔离级别</span><br><span class="line">#READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE</span><br><span class="line">transaction-isolation &#x3D; REPEATABLE-READ</span><br><span class="line"></span><br><span class="line">performance_schema_max_table_instances &#x3D; 400</span><br><span class="line">table_definition_cache &#x3D; 400</span><br><span class="line"></span><br><span class="line">#主要用于多进程条件下对Myisam表进行锁定,在锁定的过程中,每个进程若要访问数据需等之前的进程完成操作并解除锁定后才能访问数据表,大大提升安全性，同时也造成了性能的消耗。</span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">#指定用于索引的缓冲区大小，增加它可得到更好的索引处理性能。如果是以InnoDB引擎为主的DB，key_buffer_size 可以设置较小，8MB已足够；如果是以MyISAM引擎为主，可设置较大，但不能超过4G。 在这里，强烈建议不使用MyISAM引擎，默认都是用InnoDB引擎。注意：该参数值设置的过大反而会是服务器整体效率降低！</span><br><span class="line">key_buffer_size &#x3D; 128M</span><br><span class="line"></span><br><span class="line">#可接收数据包大小</span><br><span class="line">max_allowed_packet &#x3D; 100G</span><br><span class="line"></span><br><span class="line">#主要设置table高速缓存数量（默认情况mysql服务器为2G内存设置256-512， 4G内存则为2048，当然内存越大，可以设置更大）</span><br><span class="line">table_open_cache &#x3D; 512</span><br><span class="line"></span><br><span class="line">#查询排序时所能使用的缓冲区大小。排序缓冲被用来处理类似 ORDER BY 以及 GROUP BY 队列所引起的排序。在排序发生时由每个线程分配，注意：该参数对应的分配内存是每连接独占！如果有 100 个连接，那么实际分配的总共排序缓冲区大小为 100 × 6 &#x3D; 600MB,所以,对于内存在 4GB 左右的服务器推荐设置为 6-8M。</span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line"></span><br><span class="line">#包消息缓冲区初始化为 net_buffer_length 字节，但需要时可以增长到 max_allowed_packet 字节</span><br><span class="line">net_buffer_length &#x3D; 4K</span><br><span class="line"></span><br><span class="line">#读查询操作所能使用的缓冲区大小。和 sort_buffer_size 一样，该参数对应的分配内存也是每连接独享！用来做 MyISAM 表全表扫描的缓冲大小。当全表扫描需要时，在对应线程中分配。</span><br><span class="line">read_buffer_size &#x3D; 2M</span><br><span class="line"></span><br><span class="line">#MyISAM 以索引扫描(Random Scan)方式扫描数据的 buffer大小 </span><br><span class="line">read_rnd_buffer_size &#x3D; 256K</span><br><span class="line"></span><br><span class="line">#MyISAM 设置恢复表之时使用的缓冲区的尺寸,当在REPAIR TABLE 或用 CREATE INDEX 创建索引或 ALTER TABLE 过程中排序 MyISAM 索引分配的缓冲区</span><br><span class="line">myisam_sort_buffer_size &#x3D; 32M</span><br><span class="line"></span><br><span class="line">#我们在 cache 中保留多少线程用于重用。当一个客户端断开连接后，如果 cache 中的线程还少于 thread_cache_size，则客户端线程被放入 cache 中。这可以在你需要大量新连接的时候极大的减少线程创建的开销（一般来说如果你有好的线程模型的话，这不会有明显的性能提升。）服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，如果线程重新被请求，那么请求将从缓存中读取，如果缓存中是空的或者是新的请求，那么这个线程将被重新创建，如果有很多新的线程，增加这个值可以改善系统性能。通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用，根据物理内存设置规则如下：</span><br><span class="line">#1G  —&gt; 8</span><br><span class="line">#2G  —&gt; 16</span><br><span class="line">#3G  —&gt; 32</span><br><span class="line">#大于3G  —&gt; 64</span><br><span class="line">thread_cache_size &#x3D; 64</span><br><span class="line"></span><br><span class="line">#指定 MySQL 查询缓冲区的大小。可以通过在 MySQL 控制台执行以下命令观察：</span><br><span class="line">#代码:</span><br><span class="line">#&gt; SHOW VARIABLES LIKE &#39;%query_cache%&#39;;</span><br><span class="line">#&gt; SHOW STATUS LIKE &#39;Qcache%&#39;;如果 Qcache_lowmem_prunes 的值非常大，则表明经常出现缓冲不够的情况；</span><br><span class="line">#如果 Qcache_hits 值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲； Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。</span><br><span class="line">#memlock # 如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的 mysql 在在内存高度紧张的时候,数据在内存中保持锁定并且防止可能被 swapping out，此选项对于性能有益。</span><br><span class="line">query_cache_size &#x3D; 64M</span><br><span class="line"></span><br><span class="line">#临时表的最大大小，如果超过该值，则结果放到磁盘中，此限制是针对单个表的，而不是总和。</span><br><span class="line">tmp_table_size &#x3D; 64M</span><br><span class="line"></span><br><span class="line">#定义了mysql应该支持的sql语法，数据校验等 参考https:&#x2F;&#x2F;www.cnblogs.com&#x2F;Zender&#x2F;p&#x2F;8270833.html</span><br><span class="line">sql-mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">#timestamp类型的字段，如果插入时没有提供值，下面设置为true时自动填充当前日期，如2019-11-27 23:42:00</span><br><span class="line">explicit_defaults_for_timestamp &#x3D; true</span><br><span class="line"></span><br><span class="line">#禁止 MySQL 对外部连接进行 DNS 解析，使用这一选项可以消除 MySQL 进行 DNS 解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用 IP 地址方式，否则 MySQL 将无法正常处理连接请求！</span><br><span class="line">#skip-name-resolve</span><br><span class="line"></span><br><span class="line">#指定MySQL允许的最大连接进程数。如果在访问数据库时经常出现&quot;Too Many Connections&quot;的错误提 示，则需要增大该参数值。</span><br><span class="line">max_connections &#x3D; 500</span><br><span class="line"></span><br><span class="line">#如果某个用户发起的连接 error 超过该数值，则该用户的下次连接将被阻塞，直到管理员执行 flush hosts; 命令或者服务重启，防止黑客，非法的密码以及其他在链接时的错误会增加此值</span><br><span class="line">max_connect_errors &#x3D; 100</span><br><span class="line"></span><br><span class="line">#MySQL打开的文件描述符限制，默认最小1024；当open_files_limit没有被配置的时候，比较max_connections*5和ulimit-n的值，哪个大用哪个，当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span><br><span class="line">open_files_limit &#x3D; 65535</span><br><span class="line"></span><br><span class="line">#打开二进制日志功能</span><br><span class="line">#在复制(replication)配置中,作为 MASTER 主服务器必须打开此项。如果你需要从你最后的备份中做基于时间点的恢复，也同样需要二进制日志。这些路径相对于 datadir</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line"></span><br><span class="line">#binlog格式，推荐用mixed</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line"></span><br><span class="line">#表示是本机的序号为2，在同一架构中的编号必须是唯一的</span><br><span class="line">server-id &#x3D; 2</span><br><span class="line"></span><br><span class="line">#超过 10 天的 binlog 删除</span><br><span class="line">expire_logs_days &#x3D; 10</span><br><span class="line"></span><br><span class="line">#指定是否开启慢查询日志。慢查询是指消耗了比 “long_query_time” 定义的更多时间的查询。如果 log_queries_not_using_indexes 被打开，那些没有使用索引的查询也会被记录。如果你经常增加新查询到已有的系统内的话，一般来说这是一个好主意。如果系统中的SQL查询语句都已经优化过了，可以考虑关闭。</span><br><span class="line">slow_query_log&#x3D;1</span><br><span class="line"></span><br><span class="line">#慢查询日志存放路径</span><br><span class="line">slow-query-log-file&#x3D;&#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br><span class="line"></span><br><span class="line">#SQL语句执行超过 0.1 秒就记录下来，单位为秒</span><br><span class="line">long_query_time&#x3D;0.1</span><br><span class="line"></span><br><span class="line">#下面值为on时，未使用索引的查询也被记录到慢查询日志中（可选项）</span><br><span class="line">log_queries_not_using_indexes&#x3D;on</span><br><span class="line"></span><br><span class="line">#预先加载的插件列表，表示在内建插件加载之前，以及存储引擎初始化之前，需要加载的插件。比如InnoDB表空间加密依赖 keyring_file 插件，那么 keyring_file 插件必需在InnoDB存储引擎初始化之前加载。</span><br><span class="line">early-plugin-load &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">#Mysql主从架构时，从站指定要复制的数据库名单（白名单）</span><br><span class="line">replicate_do_db&#x3D;db_ssp</span><br><span class="line"></span><br><span class="line">#Mysql主从架构时，从站指定要忽略的数据库名单（黑名单），多个时，一行一个库</span><br><span class="line">replicate_ignore_db&#x3D;information_schema</span><br><span class="line">replicate_ignore_db&#x3D;performance_schema</span><br><span class="line">replicate_ignore_db&#x3D;mysql</span><br><span class="line">replicate_ignore_db&#x3D;sys</span><br><span class="line"></span><br><span class="line">#Mysql主从架构时，从站指定要忽略的数据库中指定的数据表（黑名单），多个时，一行一个表，格式：数据库名.表名</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_admin_user</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_ads_access_count</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_ads_fail_log</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_channel_flow_collect</span><br><span class="line">replicate_ignore_table&#x3D;db_ssp.ssp_stat_income_display</span><br><span class="line"></span><br><span class="line">#从站SQL线程从relay log重放命令时，忽略这些错误码</span><br><span class="line">slave-skip-errors&#x3D;1007,1008,1032,1062</span><br><span class="line"></span><br><span class="line">#设置此选项如果你希望 InnoDB 表空间文件被保存在其他分区，默认保存在 MySQL 的 datadir 中。</span><br><span class="line">innodb_data_home_dir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line"></span><br><span class="line">#InnoDB将数据保存在一个或者多个数据文件中成为表空间。如果你只有单个逻辑驱动保存你的数据，一个单个的自增文件就足够好了。其他情况下，每个设备一个文件一般都是个好的选择，你也可以配置 InnoDB 来使用裸盘分区，请参考手册来获取更多相关内容</span><br><span class="line">innodb_data_file_path &#x3D; ibdata1:10M:autoextend</span><br><span class="line"></span><br><span class="line"># InnoDB 的日志文件所在位置。默认是 MySQL 的 datadir，你可以将其指定到一个独立的硬盘上或者一个 RAID1 卷上来提高其性能innodb_max_dirty_pages_pct &#x3D; 90 #innodb 主线程刷新缓存池中的数据，使脏数据比例小于 90%，这是一个软限制，不被保证绝对执行。</span><br><span class="line">innodb_log_group_home_dir &#x3D; &#x2F;www&#x2F;server&#x2F;data</span><br><span class="line"></span><br><span class="line">#包括数据页、索引页、插入缓存、锁信息、自适应哈希所以、数据字典信息，InnoDB 使用一个缓冲池来保存索引和原始数据, 不像 MyISAM。这里你设置越大，你在存取表里面数据时所需要的磁盘 I&#x2F;O 越少。在一个独立使用的数据库服务器上，你可以设置这个变量到服务器物理内存大小的 80%，不要设置过大，否则，由于物理内存的竞争可能导致操作系统的换页颠簸。注意在 32 位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制，所以不要设置的太高。</span><br><span class="line">innodb_buffer_pool_size &#x3D; 512M</span><br><span class="line"></span><br><span class="line">#事物日志大小。在日志组中每个日志文件的大小，你应该设置日志文件总合大小到你缓冲池大小的5%~100%，来避免在日志文件覆写上不必要的缓冲池刷新行为。不论如何，请注意一个大的日志文件大小会增加恢复进程所需要的时间。</span><br><span class="line">innodb_log_file_size &#x3D; 256M</span><br><span class="line"></span><br><span class="line">#用来缓冲日志数据的缓冲区的大小。当此值快满时，InnoDB 将必须刷新数据到磁盘上。由于基本上每秒都会刷新一次，所以没有必要将此值设置的太大(甚至对于长事务而言)</span><br><span class="line">innodb_log_buffer_size &#x3D; 64M</span><br><span class="line"></span><br><span class="line">#如果设置为 1，InnoDB 会在每次提交后刷新(fsync)事务日志到磁盘上，这提供了完整的 ACID 行为。如果你愿意对事务安全折衷，并且你正在运行一个小的事物，你可以设置此值到 0 或者 2 来减少由事务日志引起的磁盘 I&#x2F;O</span><br><span class="line">#0 代表日志只大约每秒写入日志文件并且日志文件刷新到磁盘。</span><br><span class="line">#2 代表日志写入日志文件在每次提交后，但是日志文件只有大约每秒才会刷新到磁盘上。</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 1</span><br><span class="line"></span><br><span class="line">#InnoDB 事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB 在它自己的锁定表中自动检测事务死锁并且回滚事务。 InnoDB 用 LOCK TABLES 语句注意到锁定设置，默认值是 50 秒。</span><br><span class="line">innodb_lock_wait_timeout &#x3D; 50</span><br><span class="line"></span><br><span class="line">innodb_max_dirty_pages_pct &#x3D; 90</span><br><span class="line"></span><br><span class="line">#innodb使用后台线程处理数据页上的读写 I&#x2F;O(输入输出)请求，根据你的 CPU 核数来更改，默认是4</span><br><span class="line">#注：这两个参数不支持动态改变，需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span><br><span class="line">#假如CPU是2颗8核的，那么可以分别设置为8，如果数据库的读操作比写操作多，那么可以分别设置10（read）和6（write）</span><br><span class="line">innodb_read_io_threads &#x3D; 2</span><br><span class="line">innodb_write_io_threads &#x3D; 2</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line"></span><br><span class="line">#mysqldump可以行级导出数据，或者也可以将整个表载入内存一次性导出，如果将所有数据导入内存可能会面临内存缓冲区不够的问题。如果要行级导出数据，使用--quick选项。</span><br><span class="line">quick</span><br><span class="line"></span><br><span class="line">#服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB 字段一起工作时相当必要)， 每个连接独立的大小，大小动态增加。 设置最大包，限制server接受的数据包大小，避免超长SQL的执行有问题 默认值为16M，当MySQL客户端或 mysqld 服务器收到大于 max_allowed_packet 字节的信息包时，将发出“信息包过大”错误，并关闭连接。对于某些客户端，如果通信信息包过大，在执行查询期间，可能会遇到“丢失与 MySQL 服务器的连接”错误。默认值 16M。</span><br><span class="line">max_allowed_packet &#x3D; 500M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">#mysql命令窗口，自带命令补全功能，只是默认是禁用的，如果要开启，将下行改为auto-rehash即可</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">#MyISAM相关选项 </span><br><span class="line">[myisamchk]</span><br><span class="line"></span><br><span class="line">#指定用于索引的缓冲区大小，增加它可得到更好的索引处理性能。如果是以InnoDB引擎为主的DB，专用于MyISAM引擎的 key_buffer_size 可以设置较小，8MB 已足够。如果是以MyISAM引擎为主，可设置较大，但不能超过4G。在这里，强烈建议用InnoDB引擎，而不使用MyISAM引擎。注意：该参数值设置的过大反而会是服务器整体效率降低！</span><br><span class="line">key_buffer_size &#x3D; 128M</span><br><span class="line"></span><br><span class="line">#查询排序时所能使用的缓冲区大小。排序缓冲被用来处理类似 ORDER BY 以及 GROUP BY 队列所引起的排序。一个用来替代的基于磁盘的合并分类会被使用。查看 “Sort_merge_passes” 状态变量。 在排序发生时由每个线程分配，注意：该参数对应的分配内存是每连接独占！如果有 100 个连接，那么实际分配的总共排序缓冲区大小为 100 × 6 &#x3D; 600MB，所以对于内存在 4GB 左右的服务器推荐设置为 6-8M。 </span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line"></span><br><span class="line">#读查询操作所能使用的缓冲区大小。和 sort_buffer_size 一样，该参数对应的分配内存也是每连接独享！用来做 MyISAM 表全表扫描的缓冲大小。当全表扫描需要时，在对应线程中分配。</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line"></span><br><span class="line">#写操作所能使用的缓冲区大小。</span><br><span class="line">write_buffer &#x3D; 2M</span><br><span class="line"></span><br><span class="line">#mysqlhotcopy只支持 MyISAM 引擎</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line"></span><br><span class="line">#指的是mysql在关闭一个交互的连接之前所要等待的秒数(交互连接如mysql gui tool中的连接)，其取值范围随wait_timeout变动，默认值28800。</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><hr><p>参考：<a href="https://www.cnblogs.com/panwenbin-logs/p/8360703.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/panwenbin-logs/p/8360703.html</a></p>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>慢日志分析工具mysqldumpslow的使用</title>
    <url>/blog/mysql/man-ri-zhi-fen-xi-gong-ju-mysqldumpslow-de-shi-yong.html</url>
    <content><![CDATA[<p>mysqldumpslow是mysql自带的一个慢日志分析工具。<br>如果执行这个命令提示不存在时，可使用<code>find / -name mysqldumpslow</code>命令查找一下，然后将其添加到PATH中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;www&#x2F;server&#x2F;mysql&#x2F;bin&#x2F;mysqldumpslow  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;mysqldumpslow</span><br></pre></td></tr></table></figure><p>宝塔中Mysql的慢日志默认存放在：<code>/www/server/data/mysql-slow.log</code><br>可以将慢日志复制到测试机上分析。</p><a id="more"></a><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-s 是什么方式排序</span><br><span class="line">    c：访问计数</span><br><span class="line">    l：锁定时间</span><br><span class="line">    r：返回记录</span><br><span class="line">    al：平均锁定时间</span><br><span class="line">    ar：平均访问记录数</span><br><span class="line">    at：平均查询时间</span><br><span class="line"></span><br><span class="line">-t  是top n的意思，即返回前面多少条分析结果</span><br><span class="line"></span><br><span class="line">-g  可以跟上正则匹配模式，大小写不敏感。</span><br></pre></td></tr></table></figure><h4 id="分析示例"><a href="#分析示例" class="headerlink" title="分析示例"></a>分析示例</h4><p><strong>1、获取10条执行时间最长的sql语句</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s t -t 10 &#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br></pre></td></tr></table></figure><p>其中<code>-s t</code>表示按查询总时长排序，即下面结果中Time=6.83s (567s)中的567s排序</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Count: 83  Time&#x3D;6.83s (567s)  Lock&#x3D;0.00s (0s)  Rows&#x3D;264498.0 (21953330), 2users@localhost</span><br><span class="line">  SELECT &#x2F;*!N SQL_NO_CACHE *&#x2F; * FROM &#96;ssp_ads_fail_log&#96;</span><br></pre></td></tr></table></figure><p><strong>返回结果解析：</strong><br>Count: 83 说明执行了83次<br>Time=6.83s (567s) 说明最大时间是6.83s，总共花费时间567s<br>Lock=0.00s (0s) 说明查询不锁表<br>Rows=264498.0 (21953330) 说明单次返回的结果数是264498条记录，总共查询了264498x83条</p><p><strong>2、获取10条查询记录数最多的sql语句</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s r -t 10 &#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br></pre></td></tr></table></figure><p><strong>3、查询10条执行时间最长且包含left join的sql语句</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s t -t 10 -g &quot;left join&quot; &#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br></pre></td></tr></table></figure><p><strong>4、获取10条执行时间最长且不合并分析结果的sql语句</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -a -s t -t 10 &#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br></pre></td></tr></table></figure><p>其中<code>-a</code>说明不合并类似的SQL语句，显示具体的SQL语句中的数字和字符串。<br>因为在mysqldumpslow统计中，如下两种查询默认是同一种类型的语句，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM sms_send WHERE service_id&#x3D;10 GROUP BY content LIMIT 0, 1000;</span><br><span class="line">SELECT * FROM sms_send WHERE service_id&#x3D;20 GROUP BY content LIMIT 10000, 1000;</span><br></pre></td></tr></table></figure><p>会合并显示分析结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Count: 2  Time&#x3D;2.79s (5s)  Lock&#x3D;0.00s (0s)  Rows&#x3D;1.0 (2), vgos_dba[vgos_dba]@[10.130.229.196]</span><br><span class="line">SELECT * FROM sms_send WHERE service_id&#x3D;N GROUP BY content LIMIT N, N;</span><br></pre></td></tr></table></figure><p><strong>5、获取平均访问记录数最多的10条sql语句</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s ar -t 10 &#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>1、如下执行查询后，提示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reading mysql slow query log from &#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log</span><br><span class="line">Died at &#x2F;usr&#x2F;local&#x2F;bin&#x2F;mysqldumpslow line 161, &lt;&gt; chunk 7354.</span><br></pre></td></tr></table></figure><p>说明要分析的sql日志太大了，请拆分后再分析。<br>拆分的命令为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -100000 &#x2F;www&#x2F;server&#x2F;data&#x2F;mysql-slow.log&gt;mysql-slow.20191121.log</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://www.jianshu.com/p/eb2e2c84330f" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/eb2e2c84330f</a><br><a href="https://www.jianshu.com/p/eb2e2c84330f" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/eb2e2c84330f</a><br><a href="https://www.cnblogs.com/phpper/p/6685540.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/phpper/p/6685540.html</a></p>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Base64编码原理解析</title>
    <url>/blog/cryptology/base64-bian-ma-yuan-li-jie-xi.html</url>
    <content><![CDATA[<h3 id="一、什么是Base64编码？"><a href="#一、什么是Base64编码？" class="headerlink" title="一、什么是Base64编码？"></a>一、什么是Base64编码？</h3><p>所谓Base64，就是说选出64个字符—-小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”/“（再加上作为垫字的”=”，实际上是65个字符）—-作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。</p><p>具体来说，转换方式可以分为四步：<br>第一步，将每三个字节作为一组，一共是24个二进制位。<br>第二步，将这24个二进制位分为四组，每个组有6个二进制位。<br>第三步，在每组前面加两个0，扩展成32个二进制位，即四个字节。<br>第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0　A　　17　R　　　34　i　　　51　z</span><br><span class="line">　　1　B　　18　S　　　35　j　　　52　0</span><br><span class="line">　　2　C　　19　T　　　36　k　　　53　1</span><br><span class="line">　　3　D　　20　U　　　37　l　　　54　2</span><br><span class="line">　　4　E　　21　V　　　38　m　　　55　3</span><br><span class="line">　　5　F　　22　W　　　39　n　　　56　4</span><br><span class="line">　　6　G　　23　X　　　40　o　　　57　5</span><br><span class="line">　　7　H　　24　Y　　　41　p　　　58　6</span><br><span class="line">　　8　I　　25　Z　　　42　q　　　59　7</span><br><span class="line">　　9　J　　26　a　　　43　r　　　60　8</span><br><span class="line">　　10　K　　27　b　　　44　s　　　61　9</span><br><span class="line">　　11　L　　28　c　　　45　t　　　62　+</span><br><span class="line">　　12　M　　29　d　　　46　u　　　63　&#x2F;</span><br><span class="line">　　13　N　　30　e　　　47　v</span><br><span class="line">　　14　O　　31　f　　　48　w　　　</span><br><span class="line">　　15　P　　32　g　　　49　x</span><br><span class="line">　　16　Q　　33　h　　　50　y</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> $ip = <span class="string">''</span>;</span><br><span class="line">  $ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_CDN_SRC_IP'</span>])) &#123;</span><br><span class="line">    $ip = $_SERVER[<span class="string">'HTTP_CDN_SRC_IP'</span>];</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>]) &amp;&amp; preg_match(<span class="string">'/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/'</span>, $_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>])) &#123;</span><br><span class="line">    $ip = $_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>];</span><br><span class="line">  &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]) <span class="keyword">AND</span> preg_match_all(<span class="string">'#\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;#s'</span>, $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>], $matches)) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($matches[<span class="number">0</span>] <span class="keyword">AS</span> $xip) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!preg_match(<span class="string">'#^(10|172\.16|192\.168)\.#'</span>, $xip)) &#123;</span><br><span class="line">        $ip = $xip;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Base64编码对照表</strong></p><h3 id="二、编码过程解析"><a href="#二、编码过程解析" class="headerlink" title="二、编码过程解析"></a>二、编码过程解析</h3><p><strong>1、举个栗子</strong><br>假如，我们要对字符串<code>yangxinmin</code>进行Base64编码。<br>1、先将<code>yangxinmin</code>按3个字节为一组地分开，如<code>yan</code>，<code>gxi</code>，<code>nmi</code>，<code>n</code><br>2、为了省事，这里我们不全部转换，就以<code>yan</code>为例<br>3、将<code>y</code>、<code>a</code>、<code>n</code> 3个字母的<a href="http://ascii.911cha.com/" target="_blank" rel="external nofollow noopener noreferrer">ASCII码</a>查出来，分别是：121、97、110<br>4、然后将121、97、110这3个数字转换成二进制，分别是：01111001、01100001、01101110<br>5、将上一步3个二进制串拼装到一串：011110010110000101101110<br>6、然后将011110010110000101101110，从左往右数，6位为一组分开，如：011110、010110、000101、101110<br>7、然后将这4组二进制转换成十进制数，分别是：30、22、5、46<br>8、再将上一步的4个数字，对照上面的<strong>Base64编码对照表</strong>，得到结果为：eWFu，这就是我们需要的Base64编码。</p><p>前面我们说到是将字符串3个字节一组分开，但如果不足3个字节怎么办呢？比如，<code>ya</code>或<code>y</code></p><p><strong>2、两个字节的情况处理</strong><br>以<code>ya</code>为例：<br>1、接着上面栗子第5步，将<code>ya</code>的二进制串拼装到一串：0111100101100001<br>2、然后将0111100101100001，从左往右数，6位为一组分开，到最后一组时，显示位数不够，于是在最后一组的前面和后面分别加2个0，就变成了：011110、010110、$\color{red}{00000100}$<br>3、然后将这3组二进制转换成十进制数，分别是：30、22、4<br>4、再将上一步的3个数字，对照上面的Base64编码对照表，得到结果为：eWE，$\color{red}{这里还有一个规定：少于3个字节一组的字符串，少几个就要补几个=号}$，于是最终结果为：$\color{red}{eWE=}$<br>这也解释了我们平常看到了Base64编码中时常出现多个<code>=</code>号的原因。</p><p><strong>3、一个字节的情况处理</strong><br>同两个字节类似处理，只是结尾多了一个 <code>=</code> 号</p><p><strong>4、对汉字的处理</strong><br>汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。<br>首先，“严” 字的utf-8编码为E4B8A5（如果不知道怎么查编码，<a href="https://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="external nofollow noopener noreferrer">点击这里</a>，输入汉字先进行url编码，再将%去除转换成大写，就是我们需要的uft-8编码），写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第2节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。<br>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>1、Base64编码，是一种编码算法，不是加密算法，主要作用是为了将二进制数据转换成文本格式。<br>2、Base64编码的常见的应用场景有两种：一是将图片转换成Base64编码输出到网页；二是做数字签名时，将二进制摘要数据（如PHP中hash_hmac(‘sha256’, …)函数）转换成Base64文本，见自己的另一篇文章<a href="https://www.jianshu.com/writer#/notebooks/30614692/notes/71078660" target="_blank" rel="external nofollow noopener noreferrer">JWT Token原理解析</a>第三节内容。<br>3、Base64编码的缺点是传输效率会降低，因为它把原始数据的长度增加了1/3。<br>因为标准的Base64编码会出现+、/和=，所以不适合把Base64编码后的字符串放到URL中。一种针对URL的Base64编码可以在URL中使用的Base64编码，它仅仅是把+变成-，/变成_，见自己的另一篇文章<a href="https://www.jianshu.com/writer#/notebooks/30614692/notes/71078660" target="_blank" rel="external nofollow noopener noreferrer">JWT Token原理解析</a>第三节内容。</p><p>参考：<a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" target="_blank" rel="external nofollow noopener noreferrer">http://www.ruanyifeng.com/blog/2008/06/base64.html</a> Base64编码原理</p>]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Mycat中间件实现MySQL的分表分库与读写分离</title>
    <url>/blog/mysql/ji-yu-mycat-zhong-jian-jian-shi-xian-mysql-de-fen-biao-fen-ku-yu-du-xie-fen-chi.html</url>
    <content><![CDATA[<h3 id="一、安装Java"><a href="#一、安装Java" class="headerlink" title="一、安装Java"></a>一、安装Java</h3><p>官网下载jdk1.8.0_212.tar.gz，解压到如下路径即可。<br>本次安装路径为：<code>/usr/local/java/jdk1.8.0_212/</code><br>安装过程略。</p><h3 id="二、安装MyCat"><a href="#二、安装MyCat" class="headerlink" title="二、安装MyCat"></a>二、安装MyCat</h3><p>官网：<a href="http://www.mycat.io/" target="_blank" rel="external nofollow noopener noreferrer">http://www.mycat.io/</a><br>GitHub地址：<a href="https://github.com/MyCATApache/Mycat-Server" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/MyCATApache/Mycat-Server</a><br>下载地址：<a href="http://dl.mycat.io/1.6.7.1/Mycat-server-1.6.7.1-release-20190627191042-linux.tar.gz" target="_blank" rel="external nofollow noopener noreferrer">http://dl.mycat.io/1.6.7.1/Mycat-server-1.6.7.1-release-20190627191042-linux.tar.gz</a><br>本次安装采用最新版本Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz，解压到如下路径即可。<br>本次安装路径为：<code>/usr/local/mycat</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;</span><br><span class="line">#wget -c http:&#x2F;&#x2F;dl.mycat.io&#x2F;1.6.7.1&#x2F;Mycat-server-1.6.7.1-release-20190627191042-linux.tar.gz</span><br><span class="line">tar -xzvf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz</span><br><span class="line">mv mycat ..&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>MyCat 1.6.5-release和1.6.7.4-release都测试过了，在jdk1.8环境下都是没有问题的。</p></blockquote><h3 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">#在文件末尾加上如下代码：</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_212&#x2F;</span><br><span class="line">export JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib:$JRE_HOME&#x2F;lib:.</span><br><span class="line">export MYCAT_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mycat</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin:$MYCAT_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="四、创建MyCat用户"><a href="#四、创建MyCat用户" class="headerlink" title="四、创建MyCat用户"></a>四、创建MyCat用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser mycat </span><br><span class="line">chown -R mycat:mycat &#x2F;usr&#x2F;local&#x2F;mycat</span><br><span class="line">chmod -R 777 &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;bin</span><br></pre></td></tr></table></figure><h3 id="五、配置MyCat"><a href="#五、配置MyCat" class="headerlink" title="五、配置MyCat"></a>五、配置MyCat</h3><p>本文以笔者之前开发的一个广告平台项目ArtarvaSSP为例。</p><p>1、schema.xml配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;</span><br><span class="line">	&lt;schema name&#x3D;&quot;db_ssp&quot; checkSQLschema&#x3D;&quot;true&quot; sqlMaxLimit&#x3D;&quot;100&quot; dataNode&#x3D;&quot;dn1&quot;&gt;</span><br><span class="line">		&lt;table name&#x3D;&quot;ssp_ads_fail_log&quot; primaryKey&#x3D;&quot;id&quot; autoIncrement&#x3D;&quot;true&quot; subTables&#x3D;&quot;ssp_ads_fail_log_2020_$1-52&quot; rule&#x3D;&quot;sharding-by-date&quot; dataNode&#x3D;&quot;dn2&quot; &#x2F;&gt;</span><br><span class="line">		&lt;table name&#x3D;&quot;mycat_sequence&quot; primaryKey&#x3D;&quot;name&quot; type&#x3D;&quot;global&quot; dataNode&#x3D;&quot;dn1&quot; &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;schema&gt;</span><br><span class="line">	&lt;dataNode name&#x3D;&quot;dn1&quot; dataHost&#x3D;&quot;dh1&quot; database&#x3D;&quot;db_ssp&quot; &#x2F;&gt;</span><br><span class="line">	&lt;dataNode name&#x3D;&quot;dn2&quot; dataHost&#x3D;&quot;dh2&quot; database&#x3D;&quot;db_ssp_log&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dataHost name&#x3D;&quot;dh1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;0&quot; writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;</span><br><span class="line">		&lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;</span><br><span class="line">		&lt;writeHost host&#x3D;&quot;hostM108_1&quot; url&#x3D;&quot;localhost:3306&quot; user&#x3D;&quot;db_ssp&quot; password&#x3D;&quot;SrNp6JKKmN26xwXG&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;dataHost&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dataHost name&#x3D;&quot;dh2&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;0&quot; writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;</span><br><span class="line">		&lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;</span><br><span class="line">		&lt;writeHost host&#x3D;&quot;hostM108_2&quot; url&#x3D;&quot;localhost:3306&quot; user&#x3D;&quot;db_ssp_log&quot; password&#x3D;&quot;ARZ76eCrkni4ZmTs&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;dataHost&gt;</span><br><span class="line">	</span><br><span class="line">&lt;&#x2F;mycat:schema&gt;</span><br></pre></td></tr></table></figure><p>这里主要是将<code>ssp_ads_fail_log</code>表分离到一个独立的库<code>db_ssp_log</code>中（放在dn2中），所以在schema中，单独声明了<code>&lt;table name=&quot;ssp_ads_fail_log&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; subTables=&quot;ssp_ads_fail_log_2020_$1-52&quot; rule=&quot;sharding-by-date&quot; dataNode=&quot;dn2&quot; /&gt;</code>，分片规则为按日期划分（见rule.xml文件），52周共计52张表（$1-52）。由于<code>db_ssp_log</code>库设置了独立的用户名密码，于是新建dn2。<br><code>mycat_sequence</code>为全局自增表，主要用来接管数据库的自增字段，见文末附件。</p><p>2、server.xml配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:server xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;</span><br><span class="line">	&lt;system&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;nonePasswordLogin&quot;&gt;0&lt;&#x2F;property&gt; &lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户--&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;useHandshakeV10&quot;&gt;1&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;useSqlStat&quot;&gt;0&lt;&#x2F;property&gt; </span><br><span class="line">	&lt;property name&#x3D;&quot;useGlobleTableCheck&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sequnceHandlerType&quot;&gt;1&lt;&#x2F;property&gt; &lt;!-- 指定使用 Mycat 全局序列的类型。0为本地文件方式，1为数据库方式，2为时间戳序列方式，3为分布式ZK ID 生成器，4 为zk 递增 id 生成。 --&gt;</span><br><span class="line">	&lt;property name&#x3D;&quot;subqueryRelationshipCheck&quot;&gt;false&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;processorBufferPoolType&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;serverPort&quot;&gt;8066&lt;&#x2F;property&gt;&lt;!-- 设置服务端口为8066 --&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;managerPort&quot;&gt;9066&lt;&#x2F;property&gt;&lt;!-- 设置管理端口为9066 --&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;handleDistributedTransactions&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;useOffHeapForMerge&quot;&gt;1&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;memoryPageSize&quot;&gt;64k&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;spillsFileBufferSize&quot;&gt;1k&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;useStreamOutput&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;systemReserveMemorySize&quot;&gt;384m&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;useZKSwitch&quot;&gt;false&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">	&lt;&#x2F;system&gt;</span><br><span class="line"></span><br><span class="line">	&lt;user name&#x3D;&quot;db_ssp&quot; defaultAccount&#x3D;&quot;true&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;password&quot;&gt;SrNp6JKKmN26xwXG&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;schemas&quot;&gt;db_ssp&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;user&gt;</span><br><span class="line">&lt;&#x2F;mycat:server&gt;</span><br></pre></td></tr></table></figure><p>这里主要配置了连接MyCat的用户名密码，允许访问的数据库，多个时可以用逗号隔开。为了让之前的项目从MySQL连接无缝切换到MyCat，这里的用户名密码与MySQL保持一致，到时只需要在项目里修改一下连接端口为8066就可以了。MyCat的服务端口为8066，如设置<code>&lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt;</code>。</p><p>3、rule.xml配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:rule SYSTEM &quot;rule.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:rule xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;</span><br><span class="line">	&lt;tableRule name&#x3D;&quot;sharding-by-date&quot;&gt;</span><br><span class="line">		&lt;rule&gt;</span><br><span class="line">			&lt;columns&gt;access_date&lt;&#x2F;columns&gt;</span><br><span class="line">			&lt;algorithm&gt;sharding-by-date&lt;&#x2F;algorithm&gt;</span><br><span class="line">		&lt;&#x2F;rule&gt;</span><br><span class="line">	&lt;&#x2F;tableRule&gt;</span><br><span class="line">	&lt;function name&#x3D;&quot;sharding-by-date&quot; class&#x3D;&quot;io.mycat.route.function.PartitionByDate&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;dateFormat&quot;&gt;yyyyMMdd&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;sBeginDate&quot;&gt;20200101&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;sEndDate&quot;&gt;20201229&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;sPartionDay&quot;&gt;7&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;&#x2F;function&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mycat:rule&gt;</span><br></pre></td></tr></table></figure><p>这里主要是按日期（7日）来切分数据表，最近7日的数据放在一个数据表，2020年全年52周零2天。<br>注意：开始日期与结束日期的天数必须能整除7，否则MyCat启动不了。</p><p>4、log4j2.xml日志配置：<br><code>conf/log4j2.xml</code>文件，配置如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status&#x3D;&quot;WARN&quot;&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name&#x3D;&quot;Console&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d [%-5p][%t] %m %throwable&#123;full&#125; (%C:%F:%L) %n&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Console&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;RollingFile&quot; fileName&#x3D;&quot;$&#123;sys:MYCAT_HOME&#125;&#x2F;logs&#x2F;mycat.log&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;sys:MYCAT_HOME&#125;&#x2F;logs&#x2F;$$&#123;date:yyyy-MM&#125;&#x2F;mycat-%d&#123;MM-dd&#125;-%i.log.gz&quot;&gt;</span><br><span class="line">        &lt;PatternLayout&gt;</span><br><span class="line">                &lt;Pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%l) - %m%n&lt;&#x2F;Pattern&gt;</span><br><span class="line">            &lt;&#x2F;PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;OnStartupTriggeringPolicy&#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;250 MB&quot;&#x2F;&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line">    &lt;&#x2F;Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;!--&lt;AsyncLogger name&#x3D;&quot;io.mycat&quot; level&#x3D;&quot;info&quot; includeLocation&#x3D;&quot;true&quot; additivity&#x3D;&quot;false&quot;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;AppenderRef ref&#x3D;&quot;Console&quot;&#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;AppenderRef ref&#x3D;&quot;RollingFile&quot;&#x2F;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;&#x2F;AsyncLogger&gt;--&gt;</span><br><span class="line">        &lt;asyncRoot level&#x3D;&quot;debug&quot; includeLocation&#x3D;&quot;true&quot;&gt; &lt;!--日志级别设置，取值有： info、ware、 debug--&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--&lt;AppenderRef ref&#x3D;&quot;Console&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;RollingFile&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;asyncRoot&gt;</span><br><span class="line">    &lt;&#x2F;Loggers&gt;</span><br><span class="line">&lt;&#x2F;Configuration&gt;</span><br></pre></td></tr></table></figure><p>建议在上线前期将日志级别修改成<code>debug</code>，可以看到详细的SQL执行日志（如调度到了哪台主机），观察一段时间，方便排查问题。Mycat运行稳定后将级别再调整为 <code>info/ware</code>（生产环境建议设置）。</p><h3 id="六、启动MyCat"><a href="#六、启动MyCat" class="headerlink" title="六、启动MyCat"></a>六、启动MyCat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - mycat #切换到mycat用户</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line">mycat install #将mycat安装成自启动服务</span><br><span class="line">mycat start</span><br><span class="line">mycat status</span><br><span class="line">Mycat-server is running (18098). #看到此消息说明启动成功了</span><br></pre></td></tr></table></figure><p>如果启动失败，可以查看<code>logs</code>目录下的日志文件。</p><p>常用命令：<br><code>mycat { console | start | stop | restart | status | dump }</code></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><code>mycat_sequence</code>结构如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;mycat_sequence&#96; (</span><br><span class="line">  &#96;id&#96; int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(50) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;自增变量名称&#39;,</span><br><span class="line">  &#96;current_value&#96; int(11) unsigned NOT NULL COMMENT &#39;当前值&#39;,</span><br><span class="line">  &#96;increment&#96; int(11) unsigned NOT NULL DEFAULT &#39;100&#39; COMMENT &#39;增量步长&#39;,</span><br><span class="line">  &#96;remark&#96; varchar(100) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;备注（选填）&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE,</span><br><span class="line">  UNIQUE KEY &#96;mycat_sequence_name&#96; (&#96;name&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;mycat_sequence&#96;(&#96;name&#96;, &#96;current_value&#96;, &#96;increment&#96;, &#96;remark&#96;) VALUES (&#39;GLOBAL&#39;, 100000, 100, &#39;公共自增&#39;);</span><br><span class="line">INSERT INTO &#96;mycat_sequence&#96;(&#96;name&#96;, &#96;current_value&#96;, &#96;increment&#96;, &#96;remark&#96;) VALUES (&#39;ADS_FAIL_LOG&#39;, 4261454, 1, &#39;广告日志自增&#39;);</span><br></pre></td></tr></table></figure><p>在插入记录前，通过Go查询表获取一个自增数字，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id, err :&#x3D; getMycatSequence(&quot;ADS_FAIL_LOG&quot;) &#x2F;&#x2F;获取自增值</span><br><span class="line"></span><br><span class="line">func getMycatSequence(name string) (int64, error) &#123;</span><br><span class="line">	var currentValue,increment,newValue int64</span><br><span class="line">	db :&#x3D; models.ConnDB()</span><br><span class="line">	defer db.Close()</span><br><span class="line"></span><br><span class="line">	tx, err :&#x3D; db.Begin()</span><br><span class="line">	defer func() &#123;</span><br><span class="line">		switch &#123;</span><br><span class="line">		case err !&#x3D; nil:</span><br><span class="line">			tx.Rollback()</span><br><span class="line">		default:</span><br><span class="line">			err &#x3D; tx.Commit()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	err &#x3D; db.QueryRow(&quot;SELECT &#96;current_value&#96;,&#96;increment&#96; FROM &#96;mycat_sequence&#96; WHERE &#96;name&#96; &#x3D; ? ORDER BY &#96;name&#96; asc LIMIT 1&quot;, name).Scan(&amp;currentValue, &amp;increment)</span><br><span class="line">	if err &#x3D;&#x3D; sql.ErrNoRows &#123;</span><br><span class="line">		panic(&quot;没有查询到mycat_sequence表中 &quot;+ name +&quot; 相关自增配置~\n&quot;)</span><br><span class="line">		return newValue, errors.New(&quot;&quot;)</span><br><span class="line">	&#125; else if err !&#x3D; nil &#123;</span><br><span class="line">		return newValue, err</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	newValue &#x3D; currentValue + increment</span><br><span class="line">	stmt, err :&#x3D; db.Prepare(&quot;UPDATE &#96;mycat_sequence&#96; SET &#96;current_value&#96; &#x3D; ? where &#96;name&#96;&#x3D; ? &quot;)</span><br><span class="line">	defer stmt.Close()</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		beego.Error(err)</span><br><span class="line">	&#125;</span><br><span class="line">	_, err &#x3D; stmt.Exec(newValue, name)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		beego.Error(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return newValue, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>1、通过Navicat连接到Mycat时，提示<code>too many connections</code>，将连接数修改成1000，一会又出现前面的提示，通过<code>show processlist;</code>，发现有大量的线程处于<code>Waiting for table level lock</code>，执行的操作是往日志表ssp_ads_fail_log表（MyISAM存储引擎）中insert数据，由于日志信息是实时的，每次只插入一条。<br><img data-src="/images/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/2476164-add9cd59bcae841a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt>在查询一些资料后，将问题定位到存储引擎的问题上来，主要是因为MyISAM是表级锁，频繁插入，锁的开销很大，MyISAM更适合批量插入场景，于是将存储引擎又改回InnoDB。</p><blockquote><p>查看磁盘I/O繁忙程度的命令：<code>iostat -x 2 10</code>，查看最后几列数据。<br>命令可参考：<a href="https://www.cnblogs.com/cynchanpin/p/6936977.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/cynchanpin/p/6936977.html</a></p></blockquote><p>2、将MyISAM修改成InnoDB时，又遇到了新的问题，磁盘满了（数据库日志、项目日志、MyCat debug日志都挺多的，再加上备份数据库的包也挺多的）<img data-src="/images/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/2476164-41542d16320ee331.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>于是开始清理磁盘，先找出前10个大文件<code>du -m / | sort -n -r | head -n 10</code>，清理多余的文件，然后将表修改成InnoDB：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table ssp_ads_fail_log engine&#x3D;&quot;InnoDB&quot;;</span><br></pre></td></tr></table></figure><p>再查看一下表的存储引擎是否已经修改成功：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show table status from db_ssp_log\G;</span><br><span class="line">show engines; #查看数据库支持哪些存储引擎</span><br></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://segmentfault.com/a/1190000014767902" target="_blank" rel="external nofollow noopener noreferrer">https://segmentfault.com/a/1190000014767902</a> 雪花算法</p><p><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="external nofollow noopener noreferrer">https://tech.meituan.com/2017/04/21/mt-leaf.html</a> Leaf——美团点评分布式ID生成系统</p><p><a href="https://www.jianshu.com/p/80069f6153d6" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/80069f6153d6</a> 扩展阅读</p>]]></content>
      <categories>
        <category>架构思维</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Mycat,MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Go mod使用指南</title>
    <url>/blog/go/go-mod-shi-yong-zhi-nan.html</url>
    <content><![CDATA[<h4 id="一、启用go-mod"><a href="#一、启用go-mod" class="headerlink" title="一、启用go mod"></a>一、启用go mod</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE&#x3D;on #开启 MODULE</span><br><span class="line">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,https:&#x2F;&#x2F;goproxy.io,direct   #默认值为https:&#x2F;&#x2F;proxy.golang.org,direct</span><br></pre></td></tr></table></figure><p>GO111MODULE可以设置为：off、on、auto（默认值），从GO111MODULE变量名可以看出，是Go1.11版本之后才出来有依赖包管理办法。</p><ul><li>为<code>off</code>时，则不使用go mod，查找依赖包的顺序是：当前项目根目录<code>/vendor</code>，其次是<code>$GOPATH/src</code>（这是Golang1.11版本之前的用法）。</li><li>为<code>on</code>时，则开启go mod，查找依赖包是以当前项目根目录的<code>go.mod</code>文件为基准，会忽略 <code>$GOPATH</code> 和 <code>vendor</code> 文件夹，只根据<code>go.mod</code>下载依赖。</li><li>为<code>auto</code>或未设置，则go命令根据当前目录启用或禁用模块支持。仅当当前目录位于<code>$GOPATH/src</code>之外且其本身包含<code>go.mod</code>文件或位于包含<code>go.mod</code>文件的目录下时，才启用模块支持。</li></ul><p>GOPROXY为依赖包代理地址，由于像<code>golang.org/x</code>这种依赖包需要翻墙才能下载，所以建议设置成国内镜像地址：<br><a href="https://goproxy.cn" target="_blank" rel="external nofollow noopener noreferrer">https://goproxy.cn</a> 为国内七牛云维护的GO的镜像地址。<br><a href="https://goproxy.io" target="_blank" rel="external nofollow noopener noreferrer">https://goproxy.io</a> 为国内另一个镜像地址。</p><h4 id="二、初始化go-mod"><a href="#二、初始化go-mod" class="headerlink" title="二、初始化go.mod"></a>二、初始化go.mod</h4><p>进入项目根目录（假如目录名为project1），初始化一个moudle，模块名为你的项目名，必须为英文名称，允许字母数字下划线和<code>/</code>，但是不能以<code>/</code>开头。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod init [模块名]</span><br></pre></td></tr></table></figure><p>如果我们的项目根目录在<code>$GOPATH/src/</code>中，模块名可以不填写，将自动生成，一般是与项目根目录名称同名，如<code>project1</code>或<code>github.com/project1</code>；如果项目根目录不在<code>$GOPATH/src/</code>中，则模块名必须填写，模块名同样可以命名如<code>project1</code>或<code>github.com/project1</code>，也就是说模块名不一定与路径对应起来，但如果我们使用了路径，如<code>github.com/project1</code>，后续也可以把项目搬到<code>$GOPATH/src/github.com</code>目录下去。<br>执行完后，会在当前项目根目录下创建一个<code>go.mod</code>文件，内容如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module project1</span><br><span class="line"></span><br><span class="line">go 1.13</span><br></pre></td></tr></table></figure><p>此时还没有任何依赖包信息。</p><h4 id="三、整理依赖包"><a href="#三、整理依赖包" class="headerlink" title="三、整理依赖包"></a>三、整理依赖包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><p>命令执行后，go mod会去项目文件中发现依赖包，将依赖包名单添加到<code>go.mod</code>文件中，自动删除那些有错误或者没有使用的依赖包。</p><h4 id="四、将依赖包拷贝到项目vendor"><a href="#四、将依赖包拷贝到项目vendor" class="headerlink" title="四、将依赖包拷贝到项目vendor"></a>四、将依赖包拷贝到项目vendor</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod vendor</span><br></pre></td></tr></table></figure><p>在项目完工时，我们也可以把依赖包复制到<code>项目根目录/vendor/</code>，以便存档，其实也可以不做这个操作，有<code>go.mod</code>文档就够了。<br>项目根目录下有了vendor后，就可以这样编译：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go build -mod vendor -o .&#x2F;project1  &#x2F;&#x2F;project1为编译后的包名，或如下面，加上文件名</span><br><span class="line">go build -mod vendor -o .&#x2F;project1 main.go</span><br></pre></td></tr></table></figure><h4 id="五、其他常用命令"><a href="#五、其他常用命令" class="headerlink" title="五、其他常用命令"></a>五、其他常用命令</h4><p><strong>下载依赖包到本地缓存</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod download</span><br></pre></td></tr></table></figure><p>若之前拉过一次代码，会把该次<code>go.mod</code>里面的版本信息缓存到<code>$GOPATH/pkg/mod/cache</code>里面，<br>下载时如果cache有该版本信息，就用cache里面的版本信息去下载，否则重新下载。<br><strong>注意：</strong>如果你已经拉取了一个tag版本下的包，若这个tag包含的信息被修改了，需要清除cache才能重新拉取这个这个更新后tag的信息。</p><p><strong>清理本地依赖包</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go clean -modcache</span><br></pre></td></tr></table></figure><p>以上命令是<code>go mod download</code>的反操作，执行后会删除放置在<code>$GOPATH/pkg/mod/cache</code>下的依赖包缓存，有时依赖包出现错误，可以先清理后再重新下载到本地缓存。</p><p><strong>添加单个依赖包</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod edit -require&#x3D;golang.org&#x2F;x&#x2F;text</span><br></pre></td></tr></table></figure><p><strong>移除单个依赖包</strong><br>如果我们不再使用某个包了，可以单独移除，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod edit -droprequire&#x3D;golang.org&#x2F;x&#x2F;text</span><br></pre></td></tr></table></figure><p><strong>验证依赖是否正确</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod verify</span><br></pre></td></tr></table></figure><p><strong>解释为什么需要依赖</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod why</span><br></pre></td></tr></table></figure><p><strong>校验所有依赖包的正确性</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod verify</span><br></pre></td></tr></table></figure><h4 id="六、go-mod文档说明"><a href="#六、go-mod文档说明" class="headerlink" title="六、go.mod文档说明"></a>六、go.mod文档说明</h4><p><code>go.mod</code>文件可以通过<code>require，replace，exclude</code>语句来说明依赖包的管理规则：<br><code>require</code>语句用于指定必不可少的依赖包<br><code>replace</code>语句用于指定需要替换依赖包的地址，比如<code>golang.org/x/text</code>包替换成<code>github.com/golang/text</code><br><code>exclude</code>语句用于指定可以忽略依赖项模块<br>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace (</span><br><span class="line">    cloud.google.com&#x2F;go &#x3D;&gt; github.com&#x2F;googleapis&#x2F;google-cloud-go v0.34.0</span><br><span class="line">    github.com&#x2F;go-tomb&#x2F;tomb &#x3D;&gt; gopkg.in&#x2F;tomb.v1 v1.0.0-20141024135613-dd632973f1e7</span><br><span class="line">    go.opencensus.io &#x3D;&gt; github.com&#x2F;census-instrumentation&#x2F;opencensus-go v0.19.0</span><br><span class="line">    go.uber.org&#x2F;atomic &#x3D;&gt; github.com&#x2F;uber-go&#x2F;atomic v1.3.2</span><br><span class="line">    go.uber.org&#x2F;multierr &#x3D;&gt; github.com&#x2F;uber-go&#x2F;multierr v1.1.0</span><br><span class="line">    go.uber.org&#x2F;zap &#x3D;&gt; github.com&#x2F;uber-go&#x2F;zap v1.9.1</span><br><span class="line"></span><br><span class="line">    golang.org&#x2F;x&#x2F;crypto &#x3D;&gt; github.com&#x2F;golang&#x2F;crypto v0.0.0-20181001203147-e3636079e1a4</span><br><span class="line">    golang.org&#x2F;x&#x2F;lint &#x3D;&gt; github.com&#x2F;golang&#x2F;lint v0.0.0-20181026193005-c67002cb31c3</span><br><span class="line">    golang.org&#x2F;x&#x2F;net &#x3D;&gt; github.com&#x2F;golang&#x2F;net v0.0.0-20180826012351-8a410e7b638d</span><br><span class="line">    golang.org&#x2F;x&#x2F;oauth2 &#x3D;&gt; github.com&#x2F;golang&#x2F;oauth2 v0.0.0-20180821212333-d2e6202438be</span><br><span class="line">    golang.org&#x2F;x&#x2F;sync &#x3D;&gt; github.com&#x2F;golang&#x2F;sync v0.0.0-20181108010431-42b317875d0f</span><br><span class="line">    golang.org&#x2F;x&#x2F;sys &#x3D;&gt; github.com&#x2F;golang&#x2F;sys v0.0.0-20181116152217-5ac8a444bdc5</span><br><span class="line">    golang.org&#x2F;x&#x2F;text &#x3D;&gt; github.com&#x2F;golang&#x2F;text v0.3.0</span><br><span class="line">    golang.org&#x2F;x&#x2F;time &#x3D;&gt; github.com&#x2F;golang&#x2F;time v0.0.0-20180412165947-fbb02b2291d2</span><br><span class="line">    golang.org&#x2F;x&#x2F;tools &#x3D;&gt; github.com&#x2F;golang&#x2F;tools v0.0.0-20181219222714-6e267b5cc78e</span><br><span class="line">    google.golang.org&#x2F;api &#x3D;&gt; github.com&#x2F;googleapis&#x2F;google-api-go-client v0.0.0-20181220000619-583d854617af</span><br><span class="line">    google.golang.org&#x2F;appengine &#x3D;&gt; github.com&#x2F;golang&#x2F;appengine v1.3.0</span><br><span class="line">    google.golang.org&#x2F;genproto &#x3D;&gt; github.com&#x2F;google&#x2F;go-genproto v0.0.0-20181219182458-5a97ab628bfb</span><br><span class="line">    google.golang.org&#x2F;grpc &#x3D;&gt; github.com&#x2F;grpc&#x2F;grpc-go v1.17.0</span><br><span class="line">    gopkg.in&#x2F;alecthomas&#x2F;kingpin.v2 &#x3D;&gt; github.com&#x2F;alecthomas&#x2F;kingpin v2.2.6+incompatible</span><br><span class="line">    gopkg.in&#x2F;mgo.v2 &#x3D;&gt; github.com&#x2F;go-mgo&#x2F;mgo v0.0.0-20180705113604-9856a29383ce</span><br><span class="line">    gopkg.in&#x2F;vmihailenco&#x2F;msgpack.v2 &#x3D;&gt; github.com&#x2F;vmihailenco&#x2F;msgpack v2.9.1+incompatible</span><br><span class="line">    gopkg.in&#x2F;yaml.v2 &#x3D;&gt; github.com&#x2F;go-yaml&#x2F;yaml v0.0.0-20181115110504-51d6538a90f8</span><br><span class="line">    labix.org&#x2F;v2&#x2F;mgo &#x3D;&gt; github.com&#x2F;go-mgo&#x2F;mgo v0.0.0-20160801194620-b6121c6199b7</span><br><span class="line">    launchpad.net&#x2F;gocheck &#x3D;&gt; github.com&#x2F;go-check&#x2F;check v0.0.0-20180628173108-788fd7840127</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>主要包括：<code>golang.org google.golang.org gopkg.in go.uber.org cloud.google.com</code> 在下载包时会有timeout 导致编译失败，以上是对应的github库的替换。</p><h4 id="七、go-get的使用"><a href="#七、go-get的使用" class="headerlink" title="七、go get的使用"></a>七、go get的使用</h4><p>使用<code>go mod</code>之后，<code>go get</code>拉取依赖的方式就发生了变化：<br>1、老的go get取包过程类似：<code>git clone + go install</code> , 开启Go Module功能后<code>go get</code>就只有<code>git clone</code>或者 download过程了。<br>2、新老实现还有一个不同是，两者存包的位置不同。前者，存放在<code>$GOPATH/src</code>目录下；后者，存放在<code>$GOPATH/pkg/mod</code>目录下。<br>3、老的<code>go get</code>取完主包后，会对其repo下的<code>submodule</code>进行循环拉取。新的<code>go get</code>不再支持<code>submodule</code>子模块拉取。</p><p>查看指定包可以下载的版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go list -m -versions github.com&#x2F;gogf&#x2F;gf</span><br></pre></td></tr></table></figure><p>下载项目依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get .&#x2F;...</span><br></pre></td></tr></table></figure><p>拉取最新的版本(优先择取 tag)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get golang.org&#x2F;x&#x2F;text@latest</span><br></pre></td></tr></table></figure><p>拉取 master 分支的最新 commit</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get golang.org&#x2F;x&#x2F;text@master</span><br></pre></td></tr></table></figure><p>拉取 tag 为 v0.3.2 的 commit</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get golang.org&#x2F;x&#x2F;text@v0.3.2</span><br></pre></td></tr></table></figure><p>拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get golang.org&#x2F;x&#x2F;text@342b2e</span><br></pre></td></tr></table></figure><p>指定版本拉取，拉取v3版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get github.com&#x2F;smartwalle&#x2F;alipay&#x2F;v3</span><br></pre></td></tr></table></figure><p>更新</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get -u</span><br></pre></td></tr></table></figure><h4 id="八、go-mod与原GOPATH的区别"><a href="#八、go-mod与原GOPATH的区别" class="headerlink" title="八、go mod与原GOPATH的区别"></a>八、go mod与原GOPATH的区别</h4><p>1、环境变量<code>GOPATH</code>不再用于解析imports包路径，即原有的<code>$GOPATH/src/</code>下的包，通过import是找不到了<br>2、Go Module功能开启后，下载的包将存放与<code>$GOPATH/pkg/mod</code>路径<br>3、<code>$GOPATH/bin</code>路径的功能依旧保持</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在Go1.11版本之前，依赖包管理一直是GOPATH的包管理方式，不太灵活方便，1.11版本发布后，带来了全新的<code>go mod</code>管理方式，用官方的话说，这是 GOPATH 的替代方案，集成了对版本控制和软件包分发的支持。可以看出借鉴了nodejs等包管理方式，项目的创建不再需要放在固定的<code>$GOPATH/src/</code>路径中，配合着国内的依赖包镜像源，体验很顺滑，推荐！</p>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go_modoule</tag>
      </tags>
  </entry>
  <entry>
    <title>理解GO指针</title>
    <url>/blog/go/li-jie-go-zhi-zhen.html</url>
    <content><![CDATA[<h3 id="为什么需要指针？"><a href="#为什么需要指针？" class="headerlink" title="为什么需要指针？"></a>为什么需要指针？</h3><p>简单地来说，就是保证软件功能实现的同时，尽量的节约内存资源，提高程序运行效率。</p><p>当给一个函数/方法传参的时候，我们要了解传进去的是值还是引用地址。当参数为基本类型时（如string， bool， int 及 float），传进去的大都是值，也就是另外复制了一份参数到当前的函数调用栈；当参数为高级类型时（如struct，array/slice，map，chan，func），传进去的基本都是引用地址，这个主要是因为虚拟机的内存管理导致的。</p><p>内存管理中的内存区域一般包括 heap（堆）和 stack（栈）， stack 主要用来存储当前调用栈用到的简单类型数据：string，bool，int，float 等，这些类型的内存占用小，容易回收，基本上它们的值和指针占用的空间差不多，因此可以直接复制，GC也比较容易做针对性的优化。 复杂的高级类型占用的内存往往相对较大，存储在 heap 中，GC 回收频率相对较低，代价也较大，因此传引用/指针可以避免进行成本较高的复制操作，并且节省内存，提高程序运行效率。<br>关于堆和栈不太理解的童鞋，可以阅读：<a href="https://zhuanlan.zhihu.com/p/78478567" target="_blank" rel="external nofollow noopener noreferrer">堆和栈的区别</a></p><p>因此，在下列情况可以考虑使用指针：<br><strong>1、需要改变参数的值；<br>2、避免复制操作；<br>3、节省内存。</strong></p><h3 id="一、定义指针"><a href="#一、定义指针" class="headerlink" title="一、定义指针"></a>一、定义指针</h3><p><code>var ptr1 *int64</code><br>刚定义的指针没有指向任何地址，为nil，所以也叫空指针。<br>如图：</p><img data-src="/images/loading.gif" data-original="/blog/go/li-jie-go-zhi-zhen/2476164-4944e38b8f4e843f.png"><p>我们假设图片上表示的是一个内存块，存放有变量名（户口）和值（住几口人），以及它的内存地址（门牌号），指针可以理解成一个特殊的变量，它也需要占用内存，它的特殊之处在于，它的值必须且只能存放内存地址，假设它在内存中的地址为：<code>0xabcd</code>。</p><h3 id="二、使用指针"><a href="#二、使用指针" class="headerlink" title="二、使用指针"></a>二、使用指针</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a int64 &#x3D; 100</span><br><span class="line">ptr1 &#x3D; &amp;a</span><br><span class="line">fmt.Println(*ptr1)</span><br></pre></td></tr></table></figure><p>如图：</p><img data-src="/images/loading.gif" data-original="/blog/go/li-jie-go-zhi-zhen/2476164-859607437d68e2c7.gif"><p>我们先定义一个变量<code>a</code>，系统为变量<code>a</code>分配了一个内存地址<code>0x1234</code>，<br>通过 &amp; 符可以将变量 <code>a</code> 的内存地址<code>0x1234</code>取出来，并交给 <code>ptr1</code>保存，于是<code>ptr1</code>的值由空（<code>nil</code>）变成了<code>0x1234</code>，通过<code>*ptr1</code>就可以展示刚才存入的内存地址了。</p><h3 id="三、指向指针的指针"><a href="#三、指向指针的指针" class="headerlink" title="三、指向指针的指针"></a>三、指向指针的指针</h3><p>归根结底还是指针类型，但定义时多了个<code>*</code>，例如：<code>var ptr2 **int64</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var ptr2 **int64</span><br><span class="line">ptr2 &#x3D; &amp;ptr1 &#x2F;&#x2F;ptr2为指针向指针的指针</span><br><span class="line">fmt.Println(&amp;a, ptr1, *ptr2) &#x2F;&#x2F;三者完全等价</span><br><span class="line">fmt.Println(a, *ptr1, **ptr2) &#x2F;&#x2F;三者完全等价</span><br></pre></td></tr></table></figure><p>如图：<img data-src="/images/loading.gif" data-original="/blog/go/li-jie-go-zhi-zhen/2476164-3cb98c8a57383892.gif"><br>接着前面的定义，我们定义了一个指向<code>ptr1</code>的指针<code>ptr2</code>，此时<code>ptr2</code>的值为<code>ptr1</code>的内存地址，通过<code>&amp;a, ptr1, *ptr2</code>都可以拿到内存地址<code>0x1234</code>，通过<code>a, *ptr1, **ptr2</code>都可以拿到值<code>100</code>。</p><h3 id="四、将指针作为函数参数"><a href="#四、将指针作为函数参数" class="headerlink" title="四、将指针作为函数参数"></a>四、将指针作为函数参数</h3><p>例如：我们用函数来实现交换a和b的值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a,b int64 &#x3D; 100,200</span><br><span class="line">fmt.Printf(&quot;交换前，a&#x3D;%d，b&#x3D;%d\n&quot;, a, b)</span><br><span class="line">swap(&amp;a, &amp;b)</span><br><span class="line">fmt.Printf(&quot;交换后，a&#x3D;%d，b&#x3D;%d\n&quot;, a, b)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过传递引用，交换两个变量的值</span><br><span class="line">func swap(ptr1 *int64, ptr2 *int64) &#123;</span><br><span class="line">    var tmp int64</span><br><span class="line">    tmp &#x3D; *ptr1</span><br><span class="line">    *ptr1 &#x3D; *ptr2</span><br><span class="line">    *ptr2 &#x3D; tmp</span><br><span class="line">    &#x2F;&#x2F;*ptr1,*ptr2 &#x3D; *ptr2,*ptr1 &#x2F;&#x2F;交换语句这样写更加简洁，也是 go 语言的特性，c++ 和 c# 是不能这么干的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：<img data-src="/images/loading.gif" data-original="/blog/go/li-jie-go-zhi-zhen/2476164-859607437d68e2c7.gif"></p><img data-src="/images/loading.gif" data-original="/blog/go/li-jie-go-zhi-zhen/2476164-8efa6b09b17d68af.gif"><p>在<code>swap</code>函数的形参中，我们定义了两个指针<code>ptr1</code>、<code>ptr2</code>分别用来接收a和b的地址，通过<code>*ptr1</code>、<code>*ptr2</code>分别拿到值进行交换。在Go语言中，交换值还有更简洁的操作：<code>*ptr1,*ptr2 = *ptr2,*ptr1</code>，直接交换。</p><h3 id="五、指针数组"><a href="#五、指针数组" class="headerlink" title="五、指针数组"></a>五、指针数组</h3><p>说白了还是数组，只不过这个数组仅用来存放内存地址，也就有了一个书面术语——指针数组。<br>来看代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [3]int64 &#123;1,2,3&#125;</span><br><span class="line">var ptrarr [3]*int64</span><br><span class="line">for k,_ :&#x3D; range arr &#123;</span><br><span class="line">     ptrarr[k] &#x3D; &amp;arr[k]</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;指针指向的内存地址有：&quot;, ptrarr)</span><br><span class="line">fmt.Println(&quot;遍历指针数组的值：&quot;)</span><br><span class="line">for k,_ :&#x3D; range ptrarr &#123;</span><br><span class="line">     fmt.Println(*ptrarr[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码定义了一个指针数组<code>ptrarr</code>，用于存放数组<code>arr</code>中的每一个元素的内存地址，然后通过<code>ptrarr</code>可以直接查看到值都是内存地址，通过<code>*ptrarr[k]</code>就可以获取到<code>arr</code>每一个元素的值。</p><blockquote><p>有了指针，为什么还要有指针数组，因为数组（指针数组）在内存中的地址一般情况下都是连续分配的，比零散存放的变量（指针）查找存取更有效率，速度更快。</p></blockquote><h3 id="六、结构体指针"><a href="#六、结构体指针" class="headerlink" title="六、结构体指针"></a>六、结构体指针</h3><p>6.1 说白了还是指针，只不过这个指针是指向了一个结构体，<br>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Person struct &#123;</span><br><span class="line">    name string</span><br><span class="line">    sex rune &#x2F;&#x2F;rune等同于int32</span><br><span class="line">    height uint8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var ouyang Person</span><br><span class="line">ouyang.name &#x3D; &quot;欧阳&quot;</span><br><span class="line">ouyang.sex &#x3D; &#39;男&#39;</span><br><span class="line">ouyang.height &#x3D; 175</span><br><span class="line">&#x2F;&#x2F;也可以这样赋值：ouyang :&#x3D; Person(&quot;欧阳&quot;, &#39;男&#39;, 175)</span><br><span class="line"></span><br><span class="line">var ptr1 *Person &#x2F;&#x2F;定义结构体指针，格式：var 指针名称 *结构体名</span><br><span class="line">ptr1 &#x3D; &amp;ouyang</span><br><span class="line">fmt.Println((*ptr1).name, ptr1.name)</span><br></pre></td></tr></table></figure><p>从以上代码可以得出，定义结构体指针分四步：<br>1、定义结构体类型<br>2、定义指针<br>3、实例化结构体<br>4、指针指向结构体实例</p><blockquote><p>与指向变量或数组的指针不一样的地方在于，多了一种读取方式：Go提供了一种隐式解引用特性，可以直接用<code>指针名.结构字段</code>的形式访问值，如上面代码：<code>(*ptr1).name</code>或<code>ptr1.name</code>都可以获取到值。</p></blockquote><p>6.2 也可以将结构体指针作为函数参数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main()  &#123;</span><br><span class="line">    type Person struct &#123;</span><br><span class="line">        name string</span><br><span class="line">        sex rune &#x2F;&#x2F;rune等同于int32</span><br><span class="line">        height uint8</span><br><span class="line">    &#125;</span><br><span class="line">    var ouyang Person</span><br><span class="line">    ouyang.name &#x3D; &quot;欧阳&quot;</span><br><span class="line">    ouyang.sex &#x3D; &#39;男&#39;</span><br><span class="line">    ouyang.height &#x3D; 175</span><br><span class="line">    printPerson(&amp;ouyang)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func printPerson(ptr1 *Person)  &#123;</span><br><span class="line">    fmt.Println(ptr1.name, ptr1.sex, ptr1.height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在学校学习C语言的时候，指针没学好，所以有些阴影，本文试着用简单的代码来理解GO的指针，希望给自己加深印象。不同于 C 语言，Golang 的指针是单独的类型，而不是 C 语言中的 int 类型，而且也不能对指针做整数运算。传递指针给函数不但可以节省内存（因为没有复制变量的值），而且赋予了函数直接修改外部变量的能力。</p>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go指针</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习之checkbox组件</title>
    <url>/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-checkbox-zu-jian.html</url>
    <content><![CDATA[<h4 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h4><img data-src="/images/loading.gif" data-original="/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-checkbox-zu-jian/20161213225434039.gif"><a id="more"></a><h4 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--学习checkbox组件--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;title&quot;&gt;学习checkbox组件&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;student&quot;&gt;2016&#x2F;12&#x2F;13 vsiryxm@qq.com&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text&gt;</span><br><span class="line">    1、checkbox-group是一个多选项组。</span><br><span class="line">    2、value属性为checkbox的值，当选中状态发生变化时，会触发bindchange指向的事件。</span><br><span class="line">    3、disabled属性默认为false，也就是可用状态，如果需要禁用checkbox，将其设置为true。</span><br><span class="line">    4、checked属性设置checkbox是否被选中，与网页的功能一样。</span><br><span class="line">    5、不像网页那样，有name和id属性，个人暂时觉得不习惯不好用，待更多场景使用。</span><br><span class="line">    \n&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;section&quot;&gt;多项选择器组效果：&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;checkbox-group bindchange&#x3D;&quot;chkChange&quot;&gt;</span><br><span class="line">        &lt;label class&#x3D;&quot;checkbox&quot; wx:for&#x3D;&quot;&#123;&#123;items&#125;&#125;&quot; wx:for-id&#x3D;&quot;id&quot; wx:for-item&#x3D;&quot;item&quot;&gt;</span><br><span class="line">            &lt;checkbox name&#x3D;&quot;yyy&quot; value&#x3D;&quot;&#123;&#123;item.value&#125;&#125;&quot; checked&#x3D;&quot;&#123;&#123;item.checked&#125;&#125;&quot; &#x2F;&gt; &#123;&#123;item.name&#125;&#125;</span><br><span class="line">        &lt;&#x2F;label&gt;</span><br><span class="line">    &lt;&#x2F;checkbox-group&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;section&quot;&gt;单个效果：&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;checkbox-group bindchange&#x3D;&quot;chkChange&quot;&gt;</span><br><span class="line">    &lt;checkbox value&#x3D;&quot;1&quot; bindchange&#x3D;&quot;chkChange&quot; &#x2F;&gt; 审核通过</span><br><span class="line">&lt;&#x2F;checkbox-group&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习之progress组件</title>
    <url>/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-progress-zu-jian.html</url>
    <content><![CDATA[<h4 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h4><img data-src="/images/loading.gif" data-original="/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-progress-zu-jian/20161201082300501.gif"><a id="more"></a><h4 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--学习progress组件--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;title&quot;&gt;学习progress组件&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;student&quot;&gt;2016&#x2F;12&#x2F;01 vsiryxm@qq.com&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text&gt;</span><br><span class="line">    1、show-info属性用来定义在右侧是否显示百分比数字，支持小数点。</span><br><span class="line">    2、stroke-width属性用来定义进度条线条宽度。</span><br><span class="line">    3、color属性用来定义进度条的前景色的颜色。</span><br><span class="line">    4、active属性用来定义进度条的动画效果（从左往右）。</span><br><span class="line">    \n&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;显示百分比的效果（show-info属性）：&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;&lt;progress percent&#x3D;&quot;20&quot; show-info&#x3D;&quot;true&quot; &#x2F;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;定义进度条线条宽度的效果（stroke-width属性）：&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;&lt;progress percent&#x3D;&quot;20&quot; stroke-width&#x3D;&quot;12&quot; &#x2F;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;定义进度条前景颜色的效果（color属性）：&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;&lt;progress percent&#x3D;&quot;20&quot; color&#x3D;&quot;pink&quot; &#x2F;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;让进度条动起来的效果（active属性）：&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;&lt;progress percent&#x3D;&quot;80&quot; active&#x3D;&quot;true&quot; &#x2F;&gt;&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习之text组件</title>
    <url>/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-text-zu-jian.html</url>
    <content><![CDATA[<h4 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h4><img data-src="/images/loading.gif" data-original="/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-text-zu-jian/20161129223805947.png"><a id="more"></a><h4 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--学习text组件--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;title&quot;&gt;学习text组件&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;student&quot;&gt;2016&#x2F;11&#x2F;29 vsiryxm@qq.com&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text&gt;\n</span><br><span class="line">    1、支持转义符\，如\\n为换行。</span><br><span class="line">    2、组件内只支持 text 嵌套。</span><br><span class="line">    3、除了文本节点以外的其他节点都无法长按选中。</span><br><span class="line">    \n\n&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;section&quot;&gt;</span><br><span class="line">    &lt;text&gt;</span><br><span class="line">        &lt;text&gt;这是第一行&lt;&#x2F;text&gt;</span><br><span class="line">        这是第二行\n</span><br><span class="line">        这是第三行\n</span><br><span class="line">    &lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习之icon组件</title>
    <url>/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-icon-zu-jian.html</url>
    <content><![CDATA[<h4 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h4><img data-src="/images/loading.gif" data-original="/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-icon-zu-jian/20161128232355038.png"><a id="more"></a><h4 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--学习icon组件--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;title&quot;&gt;学习icon组件&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;student&quot;&gt;2016&#x2F;11&#x2F;28 vsiryxm@qq.com&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text&gt;</span><br><span class="line">    1、icon的类型type分为：success, success_no_circle, info, warn, waiting, cancel, download, search, clear。</span><br><span class="line">    2、size可设置图标的大小，默认为23px。</span><br><span class="line">    3、color可设置图标的颜色。</span><br><span class="line">    \n&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">size控制大小：</span><br><span class="line">&lt;icon type&#x3D;&quot;success&quot; size&#x3D;&quot;23&quot;&#x2F;&gt;</span><br><span class="line">&lt;icon type&#x3D;&quot;success&quot; size&#x3D;&quot;40&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">type定义不同图标：</span><br><span class="line">info：&lt;icon type&#x3D;&quot;info&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">warn：&lt;icon type&#x3D;&quot;warn&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">waiting：&lt;icon type&#x3D;&quot;waiting&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">safe_success：&lt;icon type&#x3D;&quot;safe_success&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">safe_warn：&lt;icon type&#x3D;&quot;safe_warn&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">success_circle：&lt;icon type&#x3D;&quot;success_circle&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">success_no_circle：&lt;icon type&#x3D;&quot;success_no_circle&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">waiting_circle：&lt;icon type&#x3D;&quot;waiting_circle&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">circle：&lt;icon type&#x3D;&quot;circle&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">download：&lt;icon type&#x3D;&quot;download&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">info_circle：&lt;icon type&#x3D;&quot;info_circle&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">cancel：&lt;icon type&#x3D;&quot;cancel&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">search：&lt;icon type&#x3D;&quot;search&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">clear：&lt;icon type&#x3D;&quot;clear&quot; size&#x3D;&quot;45&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习之swiper组件</title>
    <url>/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-swiper-zu-jian.html</url>
    <content><![CDATA[<h4 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h4><img data-src="/images/loading.gif" data-original="/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-swiper-zu-jian/20161126191951468.gif"><a id="more"></a><h4 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--学习swiper焦点图组件--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;title&quot;&gt;学习swiper焦点图组件&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;student&quot;&gt;2016&#x2F;11&#x2F;26 vsiryxm@qq.com&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text&gt;\n</span><br><span class="line">    1、swiper组件相当于网页中的焦点图(或幻灯片)展示。</span><br><span class="line">    2、indicator-dots是否显示切换的圆点。</span><br><span class="line">    3、autoplay表示是否自动切换幻灯片。</span><br><span class="line">    4、current表示当前定位到哪张图，从0开始，在切换过程中，它的值会改变，一改变又会触发回调。</span><br><span class="line">    5、interval表示自动切换时间间隔，单位统一都是ms(毫秒)。</span><br><span class="line">    6、duration表示滑动动画时长。</span><br><span class="line">    7、bindchange在切换过程中，可以通过设置些参数来绑定回调函数。</span><br><span class="line">    \n&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"> </span><br><span class="line">&lt;swiper indicator-dots&#x3D;&quot;true&quot; autoplay&#x3D;&quot;true&quot; current&#x3D;&quot;0&quot; interval&#x3D;&quot;3000&quot; duration&#x3D;&quot;1000&quot; bindchange&#x3D;&quot;change&quot; style&#x3D;&quot;width:&#123;&#123;systemInfo.windowWidth&#125;&#125;px; height:&#123;&#123;systemInfo.windowWidth&#x2F;2&#125;&#125;px&quot;&gt;</span><br><span class="line">    &lt;swiper-item&gt;&lt;image src&#x3D;&quot;..&#x2F;..&#x2F;images&#x2F;m1.png&quot; height&#x3D;&quot;&quot; class&#x3D;&quot;swiper-image&quot; &#x2F;&gt;&lt;&#x2F;swiper-item&gt;</span><br><span class="line">    &lt;swiper-item&gt;&lt;image src&#x3D;&quot;..&#x2F;..&#x2F;images&#x2F;m2.png&quot; height&#x3D;&quot;&quot; class&#x3D;&quot;swiper-image&quot; &#x2F;&gt;&lt;&#x2F;swiper-item&gt;</span><br><span class="line">&lt;&#x2F;swiper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let app &#x3D; getApp();</span><br><span class="line"> </span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        systemInfo:null,</span><br><span class="line">    &#125;,</span><br><span class="line">    onLoad: function() &#123;</span><br><span class="line">        let that &#x3D; this;</span><br><span class="line">        app.getSystemInfo(function(systemInfo) &#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">                systemInfo: systemInfo,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        console.info(that.data.systemInfo);</span><br><span class="line">    &#125;,</span><br><span class="line">    change(e) &#123;</span><br><span class="line">              console.info(&#39;我移动到第&#39;+(e.detail.current+1)+&#39;张图了&#39;);</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习之scroll-view组件</title>
    <url>/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-scroll-view-zu-jian.html</url>
    <content><![CDATA[<h4 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h4><img data-src="/images/loading.gif" data-original="/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-scroll-view-zu-jian/20161124224023682.gif"><a id="more"></a><h4 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--学习scroll-view组件--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;title&quot;&gt;学习scroll-view组件&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;student&quot;&gt;2016&#x2F;11&#x2F;24 vsiryxm@qq.com&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    &lt;text&gt;\n</span><br><span class="line">    1、使用竖向滚动时，需要给scroll-view一个固定高度，通过 WXSS 设置 height。</span><br><span class="line">    2、scroll-into-view意思是滚动到某一个ID元素顶部，类似锚点效果。</span><br><span class="line">    3、bindscrolltoupper表示滚动到顶部触发回调。</span><br><span class="line">    4、bindscrolltolower表示滚动到顶部触发回调。</span><br><span class="line">    5、bindscroll表示滚动时触发回调。</span><br><span class="line">    6、scroll-into-view比bindscroll优先级高。</span><br><span class="line">    \n\n&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;section&quot;&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;section__title&quot;&gt;垂直滚动&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;!--垂直滚动，这里必须设置高度--&gt;</span><br><span class="line">  &lt;scroll-view scroll-y&#x3D;&quot;true&quot; style&#x3D;&quot;height: 200px;&quot; bindscrolltoupper&#x3D;&quot;upper&quot; bindscrolltolower&#x3D;&quot;lower&quot; bindscroll&#x3D;&quot;scroll&quot; scroll-into-view&#x3D;&quot;&#123;&#123;toView&#125;&#125;&quot; scroll-top&#x3D;&quot;&#123;&#123;scrollTop&#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;green&quot; class&#x3D;&quot;scroll-view-item bc_green&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;red&quot;  class&#x3D;&quot;scroll-view-item bc_red&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;yellow&quot; class&#x3D;&quot;scroll-view-item bc_yellow&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;blue&quot; class&#x3D;&quot;scroll-view-item bc_blue&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;scroll-view&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;view class&#x3D;&quot;btn-area&quot;&gt;&lt;text&gt;\n&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;button size&#x3D;&quot;mini&quot; bindtap&#x3D;&quot;tap&quot;&gt;click me to scroll into view &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button size&#x3D;&quot;mini&quot; bindtap&#x3D;&quot;tapMove&quot;&gt;click me to scroll&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;section section_gap&quot;&gt;&lt;text&gt;\n\n&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;section__title&quot;&gt;水平滚动&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;!--scroll-view_H这里必须强制在一行white-space:nowrap否则无法滚动--&gt;</span><br><span class="line">  &lt;scroll-view class&#x3D;&quot;scroll-view_H&quot; scroll-x&#x3D;&quot;true&quot; style&#x3D;&quot;width: 100%;&quot; bindscrolltoupper&#x3D;&quot;upper2&quot; bindscrolltolower&#x3D;&quot;lower2&quot; bindscroll&#x3D;&quot;scroll&quot; scroll-into-view&#x3D;&quot;&#123;&#123;toView2&#125;&#125;&quot; scroll-top&#x3D;&quot;&#123;&#123;scrollTop2&#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;green2&quot; class&#x3D;&quot;scroll-view-item_H bc_green&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;red2&quot;  class&#x3D;&quot;scroll-view-item_H bc_red&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;yellow2&quot; class&#x3D;&quot;scroll-view-item_H bc_yellow&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;blue2&quot; class&#x3D;&quot;scroll-view-item_H bc_blue&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;scroll-view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;text&gt;</span><br><span class="line">\n\n\n\n\n</span><br><span class="line">&lt;&#x2F;text&gt;</span><br><span class="line">&lt;!--  white-space样式属性</span><br><span class="line">  normal: 正常无变化(默认处理方式.文本自动处理换行.假如抵达容器边界内容会转到下一行)</span><br><span class="line">  pre: 保持HTML源代码的空格与换行,等同与pre标签</span><br><span class="line">  nowrap: 强制文本在一行,除非遇到br换行标签</span><br><span class="line">  pre-wrap: 同pre属性,但是遇到超出容器范围的时候会自动换行</span><br><span class="line">  pre-line: 同pre属性,但是遇到连续空格会被看作一个空格</span><br><span class="line">  inherit: 继承</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!--参考：&#x2F;u014360817&#x2F;article&#x2F;details&#x2F;52658760--&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习之view组件</title>
    <url>/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-view-zu-jian.html</url>
    <content><![CDATA[<h4 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h4><img data-src="/images/loading.gif" data-original="/blog/wei-xin-xiao-cheng-xu/wei-xin-xiao-cheng-xu-xue-xi-zhi-view-zu-jian/20161123184840910.gif"><a id="more"></a><h4 id="二、代码部分"><a href="#二、代码部分" class="headerlink" title="二、代码部分"></a>二、代码部分</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--学习view组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>学习view组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"student"</span>&gt;</span>2016/11/22 vsiryxm@qq.com<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">    \n1、从今天开始好好学习WeApp\n</span><br><span class="line">    2、我的理解是view相当于h5中的div,用来划分页面大块区域。\n</span><br><span class="line">    3、目录下只要有wxml文件就能运行，其他格式文件都可以忽略没有。\n</span><br><span class="line">    4、但目录下如果有.json格式文件就不能为空，否则无法运行。\n</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>\n下面学习几种排列法：弹性框模型<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>\n弹性框模型分为弹性容器以及弹性项目。\n当组件的display为flex或inline-flex时，该组件则为弹性容器，弹性容器的子组件为弹性项目。<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>\n</span><br><span class="line">    flex-direction：主要两个特性”row”横向排列”column”纵向排列\n</span><br><span class="line">    justify-content 主轴的对齐方式（如果flex-direction为row则主轴就是水平方向）\n</span><br><span class="line">    可选属性 (‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’)\n</span><br><span class="line">    align-items 侧轴对齐方式如果flex-direction为row则侧轴就是垂直方向）\n</span><br><span class="line">    可选属性 (‘flex-start’, ‘flex-end’, ‘center’）\n\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>flex-direction:row<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>flex-direction:column<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"height:300px;flex-direction:column;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:flex-start<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content:flex-start;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:flex-end<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content:flex-end;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:center<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content: center;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:space-between<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content: space-between;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:space-around<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content: space-around;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:center \n align-items:flex-end<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content: center;align-items: flex-end; height: 200px;border:1px solid #cccccc;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:center \n align-items:center<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content: center;align-items: center; height: 200px;border:1px solid #cccccc;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>flex-direction:row \n justify-content:center \n align-items:flex-start<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-wrp"</span> <span class="attr">style</span>=<span class="string">"flex-direction:row;justify-content: center;align-items: flex-start; height: 200px;border:1px solid #cccccc;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_red"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"flex-item bc_blue"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
</search>
